# Copyright 2021 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:spu.bzl", "spu_cc_library")

spu_cc_library(
    name = "hlo_importer",
    srcs = ["hlo_importer.cc"],
    hdrs = ["hlo_importer.h"],
    copts = [
        # TF headers have lots of warnings, disable warning-as-error for this compilation unit
        "-Wno-error",
    ],
    visibility = ["//visibility:private"],  # Should not use this library directly
    deps = [
        "//spu/compiler/common:compilation_context",
        "@org_tensorflow//tensorflow/compiler/xla/service:algebraic_simplifier",
        "@org_tensorflow//tensorflow/compiler/xla/service:batch_dot_simplification",
        "@org_tensorflow//tensorflow/compiler/xla/service:batchnorm_expander",
        "@org_tensorflow//tensorflow/compiler/xla/service:bfloat16_normalization",
        "@org_tensorflow//tensorflow/compiler/xla/service:bitcast_dtypes_expander",
        "@org_tensorflow//tensorflow/compiler/xla/service:call_inliner",
        "@org_tensorflow//tensorflow/compiler/xla/service:cholesky_expander",
        "@org_tensorflow//tensorflow/compiler/xla/service:conditional_simplifier",
        "@org_tensorflow//tensorflow/compiler/xla/service:conditional_to_select",
        "@org_tensorflow//tensorflow/compiler/xla/service:convolution_group_converter",
        "@org_tensorflow//tensorflow/compiler/xla/service:dot_decomposer",
        "@org_tensorflow//tensorflow/compiler/xla/service:dot_merger",
        "@org_tensorflow//tensorflow/compiler/xla/service:gather_expander",
        "@org_tensorflow//tensorflow/compiler/xla/service:hlo",
        "@org_tensorflow//tensorflow/compiler/xla/service:hlo_constant_folding",
        "@org_tensorflow//tensorflow/compiler/xla/service:hlo_dce",
        "@org_tensorflow//tensorflow/compiler/xla/service:hlo_pass_pipeline",
        "@org_tensorflow//tensorflow/compiler/xla/service:map_inliner",
        "@org_tensorflow//tensorflow/compiler/xla/service:operand_upcaster",
        "@org_tensorflow//tensorflow/compiler/xla/service:qr_expander",
        "@org_tensorflow//tensorflow/compiler/xla/service:reshape_mover",
        "@org_tensorflow//tensorflow/compiler/xla/service:result_caster",
        "@org_tensorflow//tensorflow/compiler/xla/service:scatter_expander",
        "@org_tensorflow//tensorflow/compiler/xla/service:sort_simplifier",
        "@org_tensorflow//tensorflow/compiler/xla/service:triangular_solve_expander",
        "@org_tensorflow//tensorflow/compiler/xla/service:while_loop_simplifier",
        "@org_tensorflow//tensorflow/compiler/xla/service:zero_sized_hlo_elimination",
        "@org_tensorflow//tensorflow/compiler/xla/translate/hlo_to_mhlo:hlo_module_importer",
        "@yacl//yacl/base:exception",
    ],
)

spu_cc_library(
    name = "fe",
    srcs = ["fe.cc"],
    hdrs = ["fe.h"],
    include_prefix = "tensorflow/compiler/mlir/hlo/include",
    visibility = ["//visibility:public"],
    deps = [
        ":hlo_importer",
        "//spu/compiler/common:compilation_context",
        "//spu/compiler/passes:hlo_legalize_to_pphlo",
        "//spu/compiler/passes:lower_conversion_cast",
        "@llvm-project//mlir:Parser",
        "@org_tensorflow//tensorflow/compiler/xla/mlir_hlo:mhlo_passes",
    ],
)
