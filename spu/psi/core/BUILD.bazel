# Copyright 2022 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:spu.bzl", "spu_cc_binary", "spu_cc_library", "spu_cc_test")

package(default_visibility = ["//visibility:public"])

spu_cc_library(
    name = "communication",
    srcs = ["communication.cc"],
    hdrs = ["communication.h"],
    deps = [
        "//spu/psi/utils:serialize",
        "@yasl//yasl/link",
    ],
)

spu_cc_library(
    name = "ecdh_psi",
    srcs = ["ecdh_psi.cc"],
    hdrs = ["ecdh_psi.h"],
    deps = [
        ":communication",
        "//spu/psi/cryptor:cryptor_selector",
        "//spu/psi/utils:batch_provider",
        "//spu/psi/utils:cipher_store",
        "@com_google_absl//absl/strings",
        "@yasl//yasl/link",
        "@yasl//yasl/utils:parallel",
    ],
)

spu_cc_test(
    name = "ecdh_psi_test",
    srcs = ["ecdh_psi_test.cc"],
    deps = [
        ":ecdh_psi",
        "//spu/psi/utils:test_utils",
    ],
)

spu_cc_binary(
    name = "ecdh_psi_bench",
    srcs = ["ecdh_psi_bench.cc"],
    deps = [
        ":ecdh_psi",
        "@com_github_google_benchmark//:benchmark_main",
    ],
)

spu_cc_library(
    name = "ecdh_3pc_psi",
    srcs = ["ecdh_3pc_psi.cc"],
    hdrs = ["ecdh_3pc_psi.h"],
    deps = [
        ":ecdh_psi",
    ],
)

spu_cc_test(
    name = "ecdh_3pc_psi_test",
    srcs = ["ecdh_3pc_psi_test.cc"],
    deps = [
        ":ecdh_3pc_psi",
        "//spu/psi/utils:test_utils",
    ],
)

spu_cc_binary(
    name = "ecdh_3pc_psi_bench",
    srcs = ["ecdh_3pc_psi_bench.cc"],
    deps = [
        ":ecdh_3pc_psi",
        "//spu/psi/utils:test_utils",
        "@com_github_google_benchmark//:benchmark_main",
    ],
)

spu_cc_library(
    name = "cuckoo_index",
    srcs = ["cuckoo_index.cc"],
    hdrs = ["cuckoo_index.h"],
    linkopts = ["-lm"],
    deps = [
        "@com_google_absl//absl/types:span",
        "@yasl//yasl/base:exception",
        "@yasl//yasl/base:int128",
    ],
)

spu_cc_test(
    name = "cuckoo_index_test",
    srcs = ["cuckoo_index_test.cc"],
    deps = [
        ":cuckoo_index",
        "@yasl//yasl/crypto:symmetric_crypto",
    ],
)

spu_cc_library(
    name = "kkrt_psi",
    srcs = ["kkrt_psi.cc"],
    hdrs = ["kkrt_psi.h"],
    deps = [
        ":communication",
        ":cuckoo_index",
        "//spu/psi/utils:serialize",
        "@com_google_absl//absl/strings",
        "@yasl//yasl/crypto:hash_util",
        "@yasl//yasl/link",
        "@yasl//yasl/mpctools/ot:base_ot",
        "@yasl//yasl/mpctools/ot:iknp_ot_extension",
        "@yasl//yasl/mpctools/ot:kkrt_ot_extension",
        "@yasl//yasl/utils:rand",
    ],
)

spu_cc_test(
    name = "kkrt_psi_test",
    srcs = ["kkrt_psi_test.cc"],
    deps = [
        ":kkrt_psi",
        "@yasl//yasl/crypto:hash_util",
    ],
)

spu_cc_binary(
    name = "kkrt_psi_bench",
    srcs = ["kkrt_psi_bench.cc"],
    deps = [
        ":kkrt_psi",
        "@com_github_google_benchmark//:benchmark_main",
    ],
)

spu_cc_library(
    name = "ecdh_oprf_psi",
    srcs = ["ecdh_oprf_psi.cc"],
    hdrs = ["ecdh_oprf_psi.h"],
    deps = [
        ":communication",
        "//spu/psi/core/ecdh_oprf:ecdh_oprf_selector",
        "//spu/psi/utils:batch_provider",
        "//spu/psi/utils:cipher_store",
        "@com_google_absl//absl/strings",
        "@yasl//yasl/link",
        "@yasl//yasl/utils:parallel",
    ],
)

spu_cc_test(
    name = "ecdh_oprf_psi_test",
    srcs = ["ecdh_oprf_psi_test.cc"],
    deps = [
        ":ecdh_oprf_psi",
        "@yasl//yasl/crypto:pseudo_random_generator",
        "@yasl//yasl/utils:rand",
    ],
)

spu_cc_library(
    name = "mini_psi",
    srcs = ["mini_psi.cc"],
    hdrs = ["mini_psi.h"],
    copts = select({
        "@bazel_tools//src/conditions:darwin": [],
        "//conditions:default": ["-fopenmp"],
    }),
    defines = ["CURVE25519_DONNA"] + select({
        "@bazel_tools//src/conditions:darwin": ["USE_LIBDISPATCH"],
        "//conditions:default": [],
    }),
    # TODO : libgomp.a is gcc only flag.
    linkopts = select({
        "@bazel_tools//src/conditions:darwin": [],
        "//conditions:default": ["-l:libgomp.a"],
    }),
    # for libgomp.a has no -fPIC
    linkstatic = True,
    deps = [
        ":communication",
        ":cuckoo_index",
        "//spu/psi/core/polynomial",
        "//spu/psi/utils:batch_provider",
        "//spu/psi/utils:serialize",
        "//spu/psi/utils:test_utils",
        "@com_github_floodyberry_curve25519_donna//:curve25519_donna",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest",
        "@yasl//yasl/crypto:hash_util",
        "@yasl//yasl/crypto:pseudo_random_generator",
        "@yasl//yasl/link",
        "@yasl//yasl/utils:parallel",
    ],
)

spu_cc_test(
    name = "mini_psi_test",
    srcs = ["mini_psi_test.cc"],
    deps = [
        ":mini_psi",
    ],
)

spu_cc_binary(
    name = "mini_psi_demo",
    srcs = ["mini_psi_demo.cc"],
    deps = [
        ":ecdh_psi",
        ":kkrt_psi",
        ":mini_psi",
        "@llvm-project//llvm:Support",
    ],
)
