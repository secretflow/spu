diff --git a/native/src/seal/evaluator.h b/native/src/seal/evaluator.h
index 1daa232..be6b874 100644
--- a/native/src/seal/evaluator.h
+++ b/native/src/seal/evaluator.h
@@ -1247,6 +1247,8 @@ namespace seal

         void multiply_plain_ntt(Ciphertext &encrypted_ntt, const Plaintext &plain_ntt) const;

+        void multiply_ntt_plain_normal(Ciphertext &encrypted_ntt, const Plaintext &plain, MemoryPoolHandle pool) const;
+
         void populate_Zmstar_to_generator();

         SEALContext context_;

diff --git a/native/src/seal/evaluator.cpp b/native/src/seal/evaluator.cpp
index 9f5c3f5..24904e8 100644
--- a/native/src/seal/evaluator.cpp
+++ b/native/src/seal/evaluator.cpp
@@ -919,14 +919,6 @@ namespace seal
     {
         // Assuming at this point encrypted is already validated.
         auto context_data_ptr = context_.get_context_data(encrypted.parms_id());
-        if (context_data_ptr->parms().scheme() == scheme_type::bfv && encrypted.is_ntt_form())
-        {
-            throw invalid_argument("BFV encrypted cannot be in NTT form");
-        }
-        if (context_data_ptr->parms().scheme() == scheme_type::ckks && !encrypted.is_ntt_form())
-        {
-            throw invalid_argument("CKKS encrypted must be in NTT form");
-        }
         if (!pool)
         {
             throw invalid_argument("pool is uninitialized");
@@ -945,22 +937,17 @@ namespace seal
         Ciphertext encrypted_copy(pool);
         encrypted_copy = encrypted;
 
-        switch (next_parms.scheme())
+        if (!encrypted.is_ntt_form())
         {
-        case scheme_type::bfv:
             SEAL_ITERATE(iter(encrypted_copy), encrypted_size, [&](auto I) {
                 rns_tool->divide_and_round_q_last_inplace(I, pool);
             });
-            break;
-
-        case scheme_type::ckks:
+        }
+        else
+        {
             SEAL_ITERATE(iter(encrypted_copy), encrypted_size, [&](auto I) {
                 rns_tool->divide_and_round_q_last_ntt_inplace(I, context_data.small_ntt_tables(), pool);
             });
-            break;
-
-        default:
-            throw invalid_argument("unsupported scheme");
         }
 
         // Copy result to destination
@@ -1533,10 +1520,6 @@ namespace seal
         {
             throw invalid_argument("plain is not valid for encryption parameters");
         }
-        if (encrypted.is_ntt_form() != plain.is_ntt_form())
-        {
-            throw invalid_argument("NTT form mismatch");
-        }
         if (!pool)
         {
             throw invalid_argument("pool is uninitialized");
@@ -1544,11 +1527,27 @@ namespace seal
 
         if (encrypted.is_ntt_form())
         {
-            multiply_plain_ntt(encrypted, plain);
+            if (plain.is_ntt_form())
+            {
+                multiply_plain_ntt(encrypted, plain);
+            }
+            else
+            {
+                multiply_ntt_plain_normal(encrypted, plain, pool);
+            }
         }
         else
         {
-            multiply_plain_normal(encrypted, plain, move(pool));
+            if (plain.is_ntt_form())
+            {
+                transform_to_ntt_inplace(encrypted);
+                multiply_plain_ntt(encrypted, plain);
+                transform_from_ntt_inplace(encrypted);
+            }
+            else
+            {
+                multiply_plain_normal(encrypted, plain, pool);
+            }
         }
 #ifdef SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT
         // Transparent ciphertext output is not allowed.
@@ -1559,6 +1558,86 @@ namespace seal
 #endif
     }
 
+    void Evaluator::multiply_ntt_plain_normal(
+        Ciphertext &encrypted_ntt, const Plaintext &plain, MemoryPoolHandle pool) const
+    {
+        // Extract encryption parameters.
+        auto &context_data = *context_.get_context_data(encrypted_ntt.parms_id());
+        auto &parms = context_data.parms();
+        auto &coeff_modulus = parms.coeff_modulus();
+        size_t coeff_count = parms.poly_modulus_degree();
+        size_t coeff_modulus_size = coeff_modulus.size();
+
+        uint64_t plain_upper_half_threshold = context_data.plain_upper_half_threshold();
+        auto plain_upper_half_increment = context_data.plain_upper_half_increment();
+        auto ntt_tables = iter(context_data.small_ntt_tables());
+
+        size_t encrypted_size = encrypted_ntt.size();
+        size_t plain_coeff_count = plain.coeff_count();
+        size_t plain_nonzero_coeff_count = plain.nonzero_coeff_count();
+
+        // Size check
+        if (!product_fits_in(encrypted_size, coeff_count, coeff_modulus_size))
+        {
+            throw logic_error("invalid parameters");
+        }
+
+        double new_scale = encrypted_ntt.scale() * plain.scale();
+        if (!is_scale_within_bounds(new_scale, context_data))
+        {
+            throw invalid_argument("scale out of bounds");
+        }
+
+        // Generic case: any plaintext polynomial
+        // Allocate temporary space for an entire RNS polynomial
+        auto temp(allocate_zero_poly(coeff_count, coeff_modulus_size, pool));
+
+        if (!context_data.qualifiers().using_fast_plain_lift)
+        {
+            StrideIter<uint64_t *> temp_iter(temp.get(), coeff_modulus_size);
+
+            SEAL_ITERATE(iter(plain.data(), temp_iter), plain_coeff_count, [&](auto I) {
+                auto plain_value = get<0>(I);
+                if (plain_value >= plain_upper_half_threshold)
+                {
+                    add_uint(plain_upper_half_increment, coeff_modulus_size, plain_value, get<1>(I));
+                }
+                else
+                {
+                    *get<1>(I) = plain_value;
+                }
+            });
+
+            context_data.rns_tool()->base_q()->decompose_array(temp_iter, coeff_count, pool);
+        }
+        else
+        {
+            // Note that in this case plain_upper_half_increment holds its value in RNS form modulo the coeff_modulus
+            // primes.
+            RNSIter temp_iter(temp.get(), coeff_count);
+            SEAL_ITERATE(iter(temp_iter, plain_upper_half_increment), coeff_modulus_size, [&](auto I) {
+                SEAL_ITERATE(iter(get<0>(I), plain.data()), plain_coeff_count, [&](auto J) {
+                    get<0>(J) = get<1>(J) +
+                                (get<1>(I) &
+                                 static_cast<uint64_t>(-static_cast<int64_t>(get<1>(J) >= plain_upper_half_threshold)));
+                });
+            });
+        }
+
+        // Need to multiply each component in encrypted with temp; first step is to transform to NTT form
+        RNSIter temp_iter(temp.get(), coeff_count);
+        ntt_negacyclic_harvey(temp_iter, coeff_modulus_size, ntt_tables);
+
+        SEAL_ITERATE(iter(encrypted_ntt), encrypted_size, [&](auto I) {
+            SEAL_ITERATE(iter(I, temp_iter, coeff_modulus, ntt_tables), coeff_modulus_size, [&](auto J) {
+                dyadic_product_coeffmod(get<0>(J), get<1>(J), coeff_count, get<2>(J), get<0>(J));
+            });
+        });
+
+        // Set the scale
+        encrypted_ntt.scale() = new_scale;
+    }
+
     void Evaluator::multiply_plain_normal(Ciphertext &encrypted, const Plaintext &plain, MemoryPoolHandle pool) const
     {
         // Extract encryption parameters.
@@ -1969,7 +2048,7 @@ namespace seal
         // DO NOT CHANGE EXECUTION ORDER OF FOLLOWING SECTION
         // BEGIN: Apply Galois for each ciphertext
         // Execution order is sensitive, since apply_galois is not inplace!
-        if (parms.scheme() == scheme_type::bfv)
+        if (!encrypted.is_ntt_form())
         {
             // !!! DO NOT CHANGE EXECUTION ORDER!!!
 
@@ -1983,7 +2062,7 @@ namespace seal
             // Next transform encrypted.data(1)
             galois_tool->apply_galois(encrypted_iter[1], coeff_modulus_size, galois_elt, coeff_modulus, temp);
         }
-        else if (parms.scheme() == scheme_type::ckks)
+        else
         {
             // !!! DO NOT CHANGE EXECUTION ORDER!!!
 
@@ -1997,10 +2076,6 @@ namespace seal
             // Next transform encrypted.data(1)
             galois_tool->apply_galois_ntt(encrypted_iter[1], coeff_modulus_size, galois_elt, temp);
         }
-        else
-        {
-            throw logic_error("scheme not implemented");
-        }
 
         // Wipe encrypted.data(1)
         set_zero_poly(coeff_count, coeff_modulus_size, encrypted.data(1));
@@ -2086,7 +2161,6 @@ namespace seal
         auto &parms = context_data.parms();
         auto &key_context_data = *context_.key_context_data();
         auto &key_parms = key_context_data.parms();
-        auto scheme = parms.scheme();
 
         // Verify parameters.
         if (!is_metadata_valid_for(encrypted, context_) || !is_buffer_valid(encrypted))
@@ -2116,14 +2190,6 @@ namespace seal
         {
             throw invalid_argument("pool is uninitialized");
         }
-        if (scheme == scheme_type::bfv && encrypted.is_ntt_form())
-        {
-            throw invalid_argument("BFV encrypted cannot be in NTT form");
-        }
-        if (scheme == scheme_type::ckks && !encrypted.is_ntt_form())
-        {
-            throw invalid_argument("CKKS encrypted must be in NTT form");
-        }
 
         // Extract encryption parameters.
         size_t coeff_count = parms.poly_modulus_degree();
@@ -2133,6 +2199,7 @@ namespace seal
         size_t rns_modulus_size = decomp_modulus_size + 1;
         auto key_ntt_tables = iter(key_context_data.small_ntt_tables());
         auto modswitch_factors = key_context_data.rns_tool()->inv_q_last_mod_q();
+        bool is_ntt_form = encrypted.is_ntt_form();
 
         // Size check
         if (!product_fits_in(coeff_count, rns_modulus_size, size_t(2)))
@@ -2158,7 +2225,7 @@ namespace seal
         set_uint(target_iter, decomp_modulus_size * coeff_count, t_target);
 
         // In CKKS t_target is in NTT form; switch back to normal form
-        if (scheme == scheme_type::ckks)
+        if (is_ntt_form)
         {
             inverse_ntt_negacyclic_harvey(t_target, decomp_modulus_size, key_ntt_tables);
         }
@@ -2185,7 +2252,7 @@ namespace seal
                 ConstCoeffIter t_operand;
 
                 // RNS-NTT form exists in input
-                if ((scheme == scheme_type::ckks) && (I == J))
+                if (is_ntt_form && (I == J))
                 {
                     t_operand = target_iter[J];
                 }
@@ -2296,7 +2363,7 @@ namespace seal
                 SEAL_ITERATE(t_ntt, coeff_count, [fix](auto &K) { K += fix; });
 
                 uint64_t qi_lazy = qi << 1; // some multiples of qi
-                if (scheme == scheme_type::ckks)
+                if (is_ntt_form)
                 {
                     // This ntt_negacyclic_harvey_lazy results in [0, 4*qi).
                     ntt_negacyclic_harvey_lazy(t_ntt, get<2>(J));
@@ -2308,7 +2375,7 @@ namespace seal
                     qi_lazy = qi << 2;
 #endif
                 }
-                else if (scheme == scheme_type::bfv)
+                else
                 {
                     inverse_ntt_negacyclic_harvey_lazy(get<0, 1>(J), get<2>(J));
                 }
