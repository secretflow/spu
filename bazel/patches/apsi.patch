diff --git a/CMakeLists.txt b/CMakeLists.txt
index 94da4aa..de53dc0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -107,7 +107,7 @@ set(APSI_INCLUDES_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR}/APSI-${APSI_VERSION_MA
 # find_package might throw a FATAL_ERROR before"xxx: not found", e.g. with vcpkg.cmake.
 
 # Microsoft SEAL
-find_package(SEAL 3.7 QUIET REQUIRED)
+find_package(SEAL 4.0 QUIET REQUIRED)
 if(NOT SEAL_FOUND)
     message(FATAL_ERROR "Microsoft SEAL: not found")
 else()
@@ -126,23 +126,24 @@ else()
 endif()
 
 # Flatbuffers
-find_package(Flatbuffers REQUIRED)
-if(NOT Flatbuffers_FOUND)
-    message(FATAL_ERROR "Flatbuffers: not found")
-else()
-    message(STATUS "Flatbuffers: found")
-    get_target_property(FLATBUFFERS_FLATC_PATH flatbuffers::flatc IMPORTED_LOCATION_RELEASE)
-    message(STATUS "flatc path: ${FLATBUFFERS_FLATC_PATH}")
-    include(CompileSchemaCXX)
-endif()
-
+#find_package(Flatbuffers REQUIRED)
+#if(NOT Flatbuffers_FOUND)
+#    message(FATAL_ERROR "Flatbuffers: not found")
+#else()
+#    message(STATUS "Flatbuffers: found")
+#    get_target_property(FLATBUFFERS_FLATC_PATH flatbuffers::flatc IMPORTED_LOCATION_RELEASE)
+#    message(STATUS "flatc path: ${FLATBUFFERS_FLATC_PATH}")
+#    include(CompileSchemaCXX)
+#endif()
+
+# *** disabled json config file, auto compute parameter ***
 # jsoncpp: for parameter configuration
-find_package(jsoncpp REQUIRED)
-if (NOT jsoncpp_FOUND)
-    message(FATAL_ERROR "jsoncpp: not found")
-else()
-    message(STATUS "jsoncpp: found")
-endif()
+#find_package(jsoncpp REQUIRED)
+#if (NOT jsoncpp_FOUND)
+#    message(FATAL_ERROR "jsoncpp: not found")
+#else()
+#    message(STATUS "jsoncpp: found")
+#endif()
 
 # [Option] APSI_USE_LOG4CPLUS (default: ON)
 set(APSI_USE_LOG4CPLUS_OPTION_STR "Use Log4cplus for logging")
@@ -157,25 +158,6 @@ if(APSI_USE_LOG4CPLUS)
     endif()
 endif()
 
-# [Option] APSI_USE_ZMQ (default: ON)
-set(APSI_USE_ZMQ_OPTION_STR "Use ZeroMQ for networking")
-option(APSI_USE_ZMQ ${APSI_USE_ZMQ_OPTION_STR} ON)
-if(APSI_USE_ZMQ)
-    # ZeroMQ base
-    find_package(ZeroMQ REQUIRED)
-    if(NOT ZeroMQ_FOUND)
-        message(FATAL_ERROR "ZeroMQ: not found")
-    else()
-        message(STATUS "ZeroMQ: found")
-    endif()
-    # cppzmq wrapper
-    find_package(cppzmq REQUIRED)
-    if(NOT cppzmq_FOUND)
-        message(FATAL_ERROR "cppzmq: not found")
-    else()
-        message(STATUS "cppzmq: found")
-    endif()
-endif()
 
 # [Option] APSI_BUILD_TESTS (default: OFF)
 set(APSI_BUILD_TESTS_OPTION_STR "Build unit and integration tests for APSI")
@@ -248,9 +230,7 @@ apsi_install_target(apsi APSITargets)
 
 target_link_libraries(apsi
     PUBLIC SEAL::seal
-    PUBLIC Kuku::kuku
-    PUBLIC flatbuffers::flatbuffers
-    PUBLIC jsoncpp_static)
+    PUBLIC Kuku::kuku)
 if(APSI_USE_LOG4CPLUS)
     target_link_libraries(apsi PUBLIC log4cplus::log4cplus)
 endif()
@@ -282,9 +262,6 @@ else()
     target_compile_options(apsi PUBLIC -D_GENERIC_)
     message(STATUS "FourQlib optimization: arch=GENERIC")
 endif()
-if(NOT MSVC AND NOT APSI_FOURQ_ARM64)
-    target_compile_options(apsi PUBLIC -march=native)
-endif()
 
 # Set AVX or AVX2 if not generic
 if(APSI_FOURQ_AMD64 OR APSI_FOURQ_ARM64)
diff --git a/common/apsi/CMakeLists.txt b/common/apsi/CMakeLists.txt
index 3b6d410..cc273ff 100644
--- a/common/apsi/CMakeLists.txt
+++ b/common/apsi/CMakeLists.txt
@@ -30,7 +30,5 @@ install(
 )
 
 add_subdirectory(fourq)
-add_subdirectory(network)
-add_subdirectory(oprf)
 add_subdirectory(util)
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES} PARENT_SCOPE)
diff --git a/common/apsi/fourq/CMakeLists.txt b/common/apsi/fourq/CMakeLists.txt
index a60d831..952d91c 100644
--- a/common/apsi/fourq/CMakeLists.txt
+++ b/common/apsi/fourq/CMakeLists.txt
@@ -3,23 +3,13 @@
 
 # Source files in this directory
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES}
-    ${CMAKE_CURRENT_LIST_DIR}/crypto_util.c
-    ${CMAKE_CURRENT_LIST_DIR}/eccp2_core.c
-    ${CMAKE_CURRENT_LIST_DIR}/eccp2_no_endo.c
-    ${CMAKE_CURRENT_LIST_DIR}/eccp2.c
-    ${CMAKE_CURRENT_LIST_DIR}/hash_to_curve.c
     ${CMAKE_CURRENT_LIST_DIR}/random.c
 )
 
 # Add header files for installation
 install(
     FILES
-        ${CMAKE_CURRENT_LIST_DIR}/FourQ_api.h
-        ${CMAKE_CURRENT_LIST_DIR}/FourQ_internal.h
-        ${CMAKE_CURRENT_LIST_DIR}/FourQ_params.h
-        ${CMAKE_CURRENT_LIST_DIR}/FourQ_tables.h
-        ${CMAKE_CURRENT_LIST_DIR}/FourQ.h
-        ${CMAKE_CURRENT_LIST_DIR}/table_lookup.h
+        ${CMAKE_CURRENT_LIST_DIR}/random.h
     DESTINATION
         ${APSI_INCLUDES_INSTALL_DIR}/apsi/fourq
 )
diff --git a/common/apsi/psi_params.cpp b/common/apsi/psi_params.cpp
index dc74d46..c92403d 100644
--- a/common/apsi/psi_params.cpp
+++ b/common/apsi/psi_params.cpp
@@ -9,7 +9,9 @@
 
 // APSI
 #include "apsi/psi_params.h"
+#ifdef USE_FLATBUFFERS
 #include "apsi/psi_params_generated.h"
+#endif
 #include "apsi/version.h"
 #include "apsi/util/utils.h"
 
@@ -179,6 +181,7 @@ namespace apsi {
         bundle_idx_count_ = table_params_.table_size / items_per_bundle_;
     }
 
+#ifdef USE_FLATBUFFERS
     size_t PSIParams::save(ostream &out) const
     {
         flatbuffers::FlatBufferBuilder fbs_builder(128);
@@ -286,6 +289,8 @@ namespace apsi {
 
         return { PSIParams(item_params, table_params, query_params, seal_params), in_data.size() };
     }
+#endif // USE_FLATBUFFERS
+
 #ifndef APSI_DISABLE_JSON
     PSIParams PSIParams::Load(const string &in)
     {
diff --git a/common/apsi/psi_params.h b/common/apsi/psi_params.h
index 53d5cd4..69c7450 100644
--- a/common/apsi/psi_params.h
+++ b/common/apsi/psi_params.h
@@ -184,6 +184,7 @@ namespace apsi {
                     item_params_.felts_per_item);
         }
 
+#ifdef USE_FLATBUFFERS	
         /**
         Writes the PSIParams to a stream.
         */
@@ -193,7 +194,7 @@ namespace apsi {
         Reads the PSIParams from a stream.
         */
         static std::pair<PSIParams, std::size_t> Load(std::istream &in);
-
+#endif
         /**
         Reads the PSIParams from a JSON string
         */
diff --git a/receiver/apsi/CMakeLists.txt b/receiver/apsi/CMakeLists.txt
index afce298..7757b68 100644
--- a/receiver/apsi/CMakeLists.txt
+++ b/receiver/apsi/CMakeLists.txt
@@ -4,7 +4,6 @@
 # Source files in this directory
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES}
     ${CMAKE_CURRENT_LIST_DIR}/plaintext_powers.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/receiver.cpp
 )
 
 # Add header files for installation
@@ -12,6 +11,7 @@ install(
     FILES
         ${CMAKE_CURRENT_LIST_DIR}/itt.h
         ${CMAKE_CURRENT_LIST_DIR}/match_record.h
+        ${CMAKE_CURRENT_LIST_DIR}/plaintext_powers.h
         ${CMAKE_CURRENT_LIST_DIR}/receiver.h
     DESTINATION
         ${APSI_INCLUDES_INSTALL_DIR}/apsi
diff --git a/receiver/apsi/itt.h b/receiver/apsi/itt.h
index e683045..105e14c 100644
--- a/receiver/apsi/itt.h
+++ b/receiver/apsi/itt.h
@@ -20,7 +20,15 @@ namespace apsi {
             create this query. If the given table index was not populated, i.e., there is no
             translation, then this function returns the number of items encoded by this query.
             */
-            std::size_t find_item_idx(std::size_t table_idx) const noexcept;
+            std::size_t find_item_idx(std::size_t table_idx) const noexcept
+            {
+                auto item_idx = table_idx_to_item_idx_.find(table_idx);
+                if (item_idx == table_idx_to_item_idx_.cend()) {
+                    return item_count();
+                }
+
+                return item_idx->second;
+            }
 
             /**
             Returns the number of items encoded by this index translation table.
@@ -30,7 +38,7 @@ namespace apsi {
                 return item_count_;
             }
 
-        private:
+        //private:
             IndexTranslationTable() = default;
 
             std::unordered_map<std::size_t, std::size_t> table_idx_to_item_idx_;
diff --git a/sender/apsi/CMakeLists.txt b/sender/apsi/CMakeLists.txt
index fd245d7..3cbf684 100644
--- a/sender/apsi/CMakeLists.txt
+++ b/sender/apsi/CMakeLists.txt
@@ -4,25 +4,16 @@
 # Source files in this directory
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES}
     ${CMAKE_CURRENT_LIST_DIR}/bin_bundle.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/query.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/sender.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/sender_db.cpp
 )
 
 # Add header files for installation
 install(
     FILES
         ${CMAKE_CURRENT_LIST_DIR}/bin_bundle.h
-        ${CMAKE_CURRENT_LIST_DIR}/query.h
-        ${CMAKE_CURRENT_LIST_DIR}/sender.h
-        ${CMAKE_CURRENT_LIST_DIR}/sender_db.h
     DESTINATION
         ${APSI_INCLUDES_INSTALL_DIR}/apsi
 )
 
 add_subdirectory(util)
 
-if(APSI_USE_ZMQ)
-    add_subdirectory(zmq)
-endif()
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES} PARENT_SCOPE)
diff --git a/sender/apsi/bin_bundle.cpp b/sender/apsi/bin_bundle.cpp
index bb36ef2..203cec2 100644
--- a/sender/apsi/bin_bundle.cpp
+++ b/sender/apsi/bin_bundle.cpp
@@ -354,7 +354,7 @@ namespace apsi {
             bool compressed)
             : crypto_context(move(context))
         {
-            compr_mode_type compr_mode = compressed ? compr_mode_type::zstd : compr_mode_type::none;
+            compr_mode_type compr_mode = compr_mode_type::none;
 
             // Find the highest degree polynomial in the list. The max degree determines how many
             // Plaintexts we need to make
diff --git a/sender/apsi/bin_bundle.h b/sender/apsi/bin_bundle.h
index 5a0bcf2..35613a0 100644
--- a/sender/apsi/bin_bundle.h
+++ b/sender/apsi/bin_bundle.h
@@ -438,6 +438,6 @@ namespace apsi {
             Loads the BinBundle from a stream.
             */
             std::pair<std::uint32_t, std::size_t> load(std::istream &in);
-        }; // class BinBundle
+	}; // class BinBundle
     }      // namespace sender
 } // namespace apsi
diff --git APSI-b0/sender/apsi/bin_bundle_generated.h APSI-b0/sender/apsi/bin_bundle_generated.h
new file mode 100644
index 0000000..179d1f4
--- /dev/null
+++ APSI-b0/sender/apsi/bin_bundle_generated.h
@@ -0,0 +1,490 @@
+// automatically generated by the FlatBuffers compiler, do not modify
+
+
+#ifndef FLATBUFFERS_GENERATED_BINBUNDLE_APSI_FBS_H_
+#define FLATBUFFERS_GENERATED_BINBUNDLE_APSI_FBS_H_
+
+#include "flatbuffers/flatbuffers.h"
+
+// Ensure the included flatbuffers.h is the same version as when this file was
+// generated, otherwise it may not be compatible.
+static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
+              FLATBUFFERS_VERSION_MINOR == 0 &&
+              FLATBUFFERS_VERSION_REVISION == 6,
+             "Non-compatible flatbuffers version included");
+
+namespace apsi {
+namespace fbs {
+
+struct FEltArray;
+struct FEltArrayBuilder;
+
+struct FEltMatrix;
+struct FEltMatrixBuilder;
+
+struct Plaintext;
+struct PlaintextBuilder;
+
+struct BatchedPlaintextPolyn;
+struct BatchedPlaintextPolynBuilder;
+
+struct BinBundleCache;
+struct BinBundleCacheBuilder;
+
+struct BinBundle;
+struct BinBundleBuilder;
+
+struct FEltArray FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+  typedef FEltArrayBuilder Builder;
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
+    VT_FELTS = 4
+  };
+  const flatbuffers::Vector<uint64_t> *felts() const {
+    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_FELTS);
+  }
+  bool Verify(flatbuffers::Verifier &verifier) const {
+    return VerifyTableStart(verifier) &&
+           VerifyOffsetRequired(verifier, VT_FELTS) &&
+           verifier.VerifyVector(felts()) &&
+           verifier.EndTable();
+  }
+};
+
+struct FEltArrayBuilder {
+  typedef FEltArray Table;
+  flatbuffers::FlatBufferBuilder &fbb_;
+  flatbuffers::uoffset_t start_;
+  void add_felts(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> felts) {
+    fbb_.AddOffset(FEltArray::VT_FELTS, felts);
+  }
+  explicit FEltArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+        : fbb_(_fbb) {
+    start_ = fbb_.StartTable();
+  }
+  flatbuffers::Offset<FEltArray> Finish() {
+    const auto end = fbb_.EndTable(start_);
+    auto o = flatbuffers::Offset<FEltArray>(end);
+    fbb_.Required(o, FEltArray::VT_FELTS);
+    return o;
+  }
+};
+
+inline flatbuffers::Offset<FEltArray> CreateFEltArray(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> felts = 0) {
+  FEltArrayBuilder builder_(_fbb);
+  builder_.add_felts(felts);
+  return builder_.Finish();
+}
+
+inline flatbuffers::Offset<FEltArray> CreateFEltArrayDirect(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    const std::vector<uint64_t> *felts = nullptr) {
+  auto felts__ = felts ? _fbb.CreateVector<uint64_t>(*felts) : 0;
+  return apsi::fbs::CreateFEltArray(
+      _fbb,
+      felts__);
+}
+
+struct FEltMatrix FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+  typedef FEltMatrixBuilder Builder;
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
+    VT_ROWS = 4
+  };
+  const flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltArray>> *rows() const {
+    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltArray>> *>(VT_ROWS);
+  }
+  bool Verify(flatbuffers::Verifier &verifier) const {
+    return VerifyTableStart(verifier) &&
+           VerifyOffsetRequired(verifier, VT_ROWS) &&
+           verifier.VerifyVector(rows()) &&
+           verifier.VerifyVectorOfTables(rows()) &&
+           verifier.EndTable();
+  }
+};
+
+struct FEltMatrixBuilder {
+  typedef FEltMatrix Table;
+  flatbuffers::FlatBufferBuilder &fbb_;
+  flatbuffers::uoffset_t start_;
+  void add_rows(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltArray>>> rows) {
+    fbb_.AddOffset(FEltMatrix::VT_ROWS, rows);
+  }
+  explicit FEltMatrixBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+        : fbb_(_fbb) {
+    start_ = fbb_.StartTable();
+  }
+  flatbuffers::Offset<FEltMatrix> Finish() {
+    const auto end = fbb_.EndTable(start_);
+    auto o = flatbuffers::Offset<FEltMatrix>(end);
+    fbb_.Required(o, FEltMatrix::VT_ROWS);
+    return o;
+  }
+};
+
+inline flatbuffers::Offset<FEltMatrix> CreateFEltMatrix(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltArray>>> rows = 0) {
+  FEltMatrixBuilder builder_(_fbb);
+  builder_.add_rows(rows);
+  return builder_.Finish();
+}
+
+inline flatbuffers::Offset<FEltMatrix> CreateFEltMatrixDirect(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    const std::vector<flatbuffers::Offset<apsi::fbs::FEltArray>> *rows = nullptr) {
+  auto rows__ = rows ? _fbb.CreateVector<flatbuffers::Offset<apsi::fbs::FEltArray>>(*rows) : 0;
+  return apsi::fbs::CreateFEltMatrix(
+      _fbb,
+      rows__);
+}
+
+struct Plaintext FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+  typedef PlaintextBuilder Builder;
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
+    VT_DATA = 4
+  };
+  const flatbuffers::Vector<uint8_t> *data() const {
+    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
+  }
+  bool Verify(flatbuffers::Verifier &verifier) const {
+    return VerifyTableStart(verifier) &&
+           VerifyOffsetRequired(verifier, VT_DATA) &&
+           verifier.VerifyVector(data()) &&
+           verifier.EndTable();
+  }
+};
+
+struct PlaintextBuilder {
+  typedef Plaintext Table;
+  flatbuffers::FlatBufferBuilder &fbb_;
+  flatbuffers::uoffset_t start_;
+  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
+    fbb_.AddOffset(Plaintext::VT_DATA, data);
+  }
+  explicit PlaintextBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+        : fbb_(_fbb) {
+    start_ = fbb_.StartTable();
+  }
+  flatbuffers::Offset<Plaintext> Finish() {
+    const auto end = fbb_.EndTable(start_);
+    auto o = flatbuffers::Offset<Plaintext>(end);
+    fbb_.Required(o, Plaintext::VT_DATA);
+    return o;
+  }
+};
+
+inline flatbuffers::Offset<Plaintext> CreatePlaintext(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
+  PlaintextBuilder builder_(_fbb);
+  builder_.add_data(data);
+  return builder_.Finish();
+}
+
+inline flatbuffers::Offset<Plaintext> CreatePlaintextDirect(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    const std::vector<uint8_t> *data = nullptr) {
+  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
+  return apsi::fbs::CreatePlaintext(
+      _fbb,
+      data__);
+}
+
+struct BatchedPlaintextPolyn FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+  typedef BatchedPlaintextPolynBuilder Builder;
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
+    VT_COEFFS = 4
+  };
+  const flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::Plaintext>> *coeffs() const {
+    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::Plaintext>> *>(VT_COEFFS);
+  }
+  bool Verify(flatbuffers::Verifier &verifier) const {
+    return VerifyTableStart(verifier) &&
+           VerifyOffsetRequired(verifier, VT_COEFFS) &&
+           verifier.VerifyVector(coeffs()) &&
+           verifier.VerifyVectorOfTables(coeffs()) &&
+           verifier.EndTable();
+  }
+};
+
+struct BatchedPlaintextPolynBuilder {
+  typedef BatchedPlaintextPolyn Table;
+  flatbuffers::FlatBufferBuilder &fbb_;
+  flatbuffers::uoffset_t start_;
+  void add_coeffs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::Plaintext>>> coeffs) {
+    fbb_.AddOffset(BatchedPlaintextPolyn::VT_COEFFS, coeffs);
+  }
+  explicit BatchedPlaintextPolynBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+        : fbb_(_fbb) {
+    start_ = fbb_.StartTable();
+  }
+  flatbuffers::Offset<BatchedPlaintextPolyn> Finish() {
+    const auto end = fbb_.EndTable(start_);
+    auto o = flatbuffers::Offset<BatchedPlaintextPolyn>(end);
+    fbb_.Required(o, BatchedPlaintextPolyn::VT_COEFFS);
+    return o;
+  }
+};
+
+inline flatbuffers::Offset<BatchedPlaintextPolyn> CreateBatchedPlaintextPolyn(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::Plaintext>>> coeffs = 0) {
+  BatchedPlaintextPolynBuilder builder_(_fbb);
+  builder_.add_coeffs(coeffs);
+  return builder_.Finish();
+}
+
+inline flatbuffers::Offset<BatchedPlaintextPolyn> CreateBatchedPlaintextPolynDirect(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    const std::vector<flatbuffers::Offset<apsi::fbs::Plaintext>> *coeffs = nullptr) {
+  auto coeffs__ = coeffs ? _fbb.CreateVector<flatbuffers::Offset<apsi::fbs::Plaintext>>(*coeffs) : 0;
+  return apsi::fbs::CreateBatchedPlaintextPolyn(
+      _fbb,
+      coeffs__);
+}
+
+struct BinBundleCache FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+  typedef BinBundleCacheBuilder Builder;
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
+    VT_FELT_MATCHING_POLYNS = 4,
+    VT_BATCHED_MATCHING_POLYN = 6,
+    VT_FELT_INTERP_POLYNS = 8,
+    VT_BATCHED_INTERP_POLYNS = 10
+  };
+  const apsi::fbs::FEltMatrix *felt_matching_polyns() const {
+    return GetPointer<const apsi::fbs::FEltMatrix *>(VT_FELT_MATCHING_POLYNS);
+  }
+  const apsi::fbs::BatchedPlaintextPolyn *batched_matching_polyn() const {
+    return GetPointer<const apsi::fbs::BatchedPlaintextPolyn *>(VT_BATCHED_MATCHING_POLYN);
+  }
+  const flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltMatrix>> *felt_interp_polyns() const {
+    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltMatrix>> *>(VT_FELT_INTERP_POLYNS);
+  }
+  const flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::BatchedPlaintextPolyn>> *batched_interp_polyns() const {
+    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::BatchedPlaintextPolyn>> *>(VT_BATCHED_INTERP_POLYNS);
+  }
+  bool Verify(flatbuffers::Verifier &verifier) const {
+    return VerifyTableStart(verifier) &&
+           VerifyOffsetRequired(verifier, VT_FELT_MATCHING_POLYNS) &&
+           verifier.VerifyTable(felt_matching_polyns()) &&
+           VerifyOffsetRequired(verifier, VT_BATCHED_MATCHING_POLYN) &&
+           verifier.VerifyTable(batched_matching_polyn()) &&
+           VerifyOffset(verifier, VT_FELT_INTERP_POLYNS) &&
+           verifier.VerifyVector(felt_interp_polyns()) &&
+           verifier.VerifyVectorOfTables(felt_interp_polyns()) &&
+           VerifyOffset(verifier, VT_BATCHED_INTERP_POLYNS) &&
+           verifier.VerifyVector(batched_interp_polyns()) &&
+           verifier.VerifyVectorOfTables(batched_interp_polyns()) &&
+           verifier.EndTable();
+  }
+};
+
+struct BinBundleCacheBuilder {
+  typedef BinBundleCache Table;
+  flatbuffers::FlatBufferBuilder &fbb_;
+  flatbuffers::uoffset_t start_;
+  void add_felt_matching_polyns(flatbuffers::Offset<apsi::fbs::FEltMatrix> felt_matching_polyns) {
+    fbb_.AddOffset(BinBundleCache::VT_FELT_MATCHING_POLYNS, felt_matching_polyns);
+  }
+  void add_batched_matching_polyn(flatbuffers::Offset<apsi::fbs::BatchedPlaintextPolyn> batched_matching_polyn) {
+    fbb_.AddOffset(BinBundleCache::VT_BATCHED_MATCHING_POLYN, batched_matching_polyn);
+  }
+  void add_felt_interp_polyns(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltMatrix>>> felt_interp_polyns) {
+    fbb_.AddOffset(BinBundleCache::VT_FELT_INTERP_POLYNS, felt_interp_polyns);
+  }
+  void add_batched_interp_polyns(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::BatchedPlaintextPolyn>>> batched_interp_polyns) {
+    fbb_.AddOffset(BinBundleCache::VT_BATCHED_INTERP_POLYNS, batched_interp_polyns);
+  }
+  explicit BinBundleCacheBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+        : fbb_(_fbb) {
+    start_ = fbb_.StartTable();
+  }
+  flatbuffers::Offset<BinBundleCache> Finish() {
+    const auto end = fbb_.EndTable(start_);
+    auto o = flatbuffers::Offset<BinBundleCache>(end);
+    fbb_.Required(o, BinBundleCache::VT_FELT_MATCHING_POLYNS);
+    fbb_.Required(o, BinBundleCache::VT_BATCHED_MATCHING_POLYN);
+    return o;
+  }
+};
+
+inline flatbuffers::Offset<BinBundleCache> CreateBinBundleCache(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    flatbuffers::Offset<apsi::fbs::FEltMatrix> felt_matching_polyns = 0,
+    flatbuffers::Offset<apsi::fbs::BatchedPlaintextPolyn> batched_matching_polyn = 0,
+    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltMatrix>>> felt_interp_polyns = 0,
+    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::BatchedPlaintextPolyn>>> batched_interp_polyns = 0) {
+  BinBundleCacheBuilder builder_(_fbb);
+  builder_.add_batched_interp_polyns(batched_interp_polyns);
+  builder_.add_felt_interp_polyns(felt_interp_polyns);
+  builder_.add_batched_matching_polyn(batched_matching_polyn);
+  builder_.add_felt_matching_polyns(felt_matching_polyns);
+  return builder_.Finish();
+}
+
+inline flatbuffers::Offset<BinBundleCache> CreateBinBundleCacheDirect(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    flatbuffers::Offset<apsi::fbs::FEltMatrix> felt_matching_polyns = 0,
+    flatbuffers::Offset<apsi::fbs::BatchedPlaintextPolyn> batched_matching_polyn = 0,
+    const std::vector<flatbuffers::Offset<apsi::fbs::FEltMatrix>> *felt_interp_polyns = nullptr,
+    const std::vector<flatbuffers::Offset<apsi::fbs::BatchedPlaintextPolyn>> *batched_interp_polyns = nullptr) {
+  auto felt_interp_polyns__ = felt_interp_polyns ? _fbb.CreateVector<flatbuffers::Offset<apsi::fbs::FEltMatrix>>(*felt_interp_polyns) : 0;
+  auto batched_interp_polyns__ = batched_interp_polyns ? _fbb.CreateVector<flatbuffers::Offset<apsi::fbs::BatchedPlaintextPolyn>>(*batched_interp_polyns) : 0;
+  return apsi::fbs::CreateBinBundleCache(
+      _fbb,
+      felt_matching_polyns,
+      batched_matching_polyn,
+      felt_interp_polyns__,
+      batched_interp_polyns__);
+}
+
+struct BinBundle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+  typedef BinBundleBuilder Builder;
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
+    VT_BUNDLE_IDX = 4,
+    VT_MOD = 6,
+    VT_ITEM_BINS = 8,
+    VT_LABEL_BINS = 10,
+    VT_CACHE = 12,
+    VT_STRIPPED = 14
+  };
+  uint32_t bundle_idx() const {
+    return GetField<uint32_t>(VT_BUNDLE_IDX, 0);
+  }
+  uint64_t mod() const {
+    return GetField<uint64_t>(VT_MOD, 0);
+  }
+  const apsi::fbs::FEltMatrix *item_bins() const {
+    return GetPointer<const apsi::fbs::FEltMatrix *>(VT_ITEM_BINS);
+  }
+  const flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltMatrix>> *label_bins() const {
+    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltMatrix>> *>(VT_LABEL_BINS);
+  }
+  const apsi::fbs::BinBundleCache *cache() const {
+    return GetPointer<const apsi::fbs::BinBundleCache *>(VT_CACHE);
+  }
+  bool stripped() const {
+    return GetField<uint8_t>(VT_STRIPPED, 0) != 0;
+  }
+  bool Verify(flatbuffers::Verifier &verifier) const {
+    return VerifyTableStart(verifier) &&
+           VerifyField<uint32_t>(verifier, VT_BUNDLE_IDX, 4) &&
+           VerifyField<uint64_t>(verifier, VT_MOD, 8) &&
+           VerifyOffsetRequired(verifier, VT_ITEM_BINS) &&
+           verifier.VerifyTable(item_bins()) &&
+           VerifyOffset(verifier, VT_LABEL_BINS) &&
+           verifier.VerifyVector(label_bins()) &&
+           verifier.VerifyVectorOfTables(label_bins()) &&
+           VerifyOffset(verifier, VT_CACHE) &&
+           verifier.VerifyTable(cache()) &&
+           VerifyField<uint8_t>(verifier, VT_STRIPPED, 1) &&
+           verifier.EndTable();
+  }
+};
+
+struct BinBundleBuilder {
+  typedef BinBundle Table;
+  flatbuffers::FlatBufferBuilder &fbb_;
+  flatbuffers::uoffset_t start_;
+  void add_bundle_idx(uint32_t bundle_idx) {
+    fbb_.AddElement<uint32_t>(BinBundle::VT_BUNDLE_IDX, bundle_idx, 0);
+  }
+  void add_mod(uint64_t mod) {
+    fbb_.AddElement<uint64_t>(BinBundle::VT_MOD, mod, 0);
+  }
+  void add_item_bins(flatbuffers::Offset<apsi::fbs::FEltMatrix> item_bins) {
+    fbb_.AddOffset(BinBundle::VT_ITEM_BINS, item_bins);
+  }
+  void add_label_bins(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltMatrix>>> label_bins) {
+    fbb_.AddOffset(BinBundle::VT_LABEL_BINS, label_bins);
+  }
+  void add_cache(flatbuffers::Offset<apsi::fbs::BinBundleCache> cache) {
+    fbb_.AddOffset(BinBundle::VT_CACHE, cache);
+  }
+  void add_stripped(bool stripped) {
+    fbb_.AddElement<uint8_t>(BinBundle::VT_STRIPPED, static_cast<uint8_t>(stripped), 0);
+  }
+  explicit BinBundleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+        : fbb_(_fbb) {
+    start_ = fbb_.StartTable();
+  }
+  flatbuffers::Offset<BinBundle> Finish() {
+    const auto end = fbb_.EndTable(start_);
+    auto o = flatbuffers::Offset<BinBundle>(end);
+    fbb_.Required(o, BinBundle::VT_ITEM_BINS);
+    return o;
+  }
+};
+
+inline flatbuffers::Offset<BinBundle> CreateBinBundle(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    uint32_t bundle_idx = 0,
+    uint64_t mod = 0,
+    flatbuffers::Offset<apsi::fbs::FEltMatrix> item_bins = 0,
+    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<apsi::fbs::FEltMatrix>>> label_bins = 0,
+    flatbuffers::Offset<apsi::fbs::BinBundleCache> cache = 0,
+    bool stripped = false) {
+  BinBundleBuilder builder_(_fbb);
+  builder_.add_mod(mod);
+  builder_.add_cache(cache);
+  builder_.add_label_bins(label_bins);
+  builder_.add_item_bins(item_bins);
+  builder_.add_bundle_idx(bundle_idx);
+  builder_.add_stripped(stripped);
+  return builder_.Finish();
+}
+
+inline flatbuffers::Offset<BinBundle> CreateBinBundleDirect(
+    flatbuffers::FlatBufferBuilder &_fbb,
+    uint32_t bundle_idx = 0,
+    uint64_t mod = 0,
+    flatbuffers::Offset<apsi::fbs::FEltMatrix> item_bins = 0,
+    const std::vector<flatbuffers::Offset<apsi::fbs::FEltMatrix>> *label_bins = nullptr,
+    flatbuffers::Offset<apsi::fbs::BinBundleCache> cache = 0,
+    bool stripped = false) {
+  auto label_bins__ = label_bins ? _fbb.CreateVector<flatbuffers::Offset<apsi::fbs::FEltMatrix>>(*label_bins) : 0;
+  return apsi::fbs::CreateBinBundle(
+      _fbb,
+      bundle_idx,
+      mod,
+      item_bins,
+      label_bins__,
+      cache,
+      stripped);
+}
+
+inline const apsi::fbs::BinBundle *GetBinBundle(const void *buf) {
+  return flatbuffers::GetRoot<apsi::fbs::BinBundle>(buf);
+}
+
+inline const apsi::fbs::BinBundle *GetSizePrefixedBinBundle(const void *buf) {
+  return flatbuffers::GetSizePrefixedRoot<apsi::fbs::BinBundle>(buf);
+}
+
+inline bool VerifyBinBundleBuffer(
+    flatbuffers::Verifier &verifier) {
+  return verifier.VerifyBuffer<apsi::fbs::BinBundle>(nullptr);
+}
+
+inline bool VerifySizePrefixedBinBundleBuffer(
+    flatbuffers::Verifier &verifier) {
+  return verifier.VerifySizePrefixedBuffer<apsi::fbs::BinBundle>(nullptr);
+}
+
+inline void FinishBinBundleBuffer(
+    flatbuffers::FlatBufferBuilder &fbb,
+    flatbuffers::Offset<apsi::fbs::BinBundle> root) {
+  fbb.Finish(root);
+}
+
+inline void FinishSizePrefixedBinBundleBuffer(
+    flatbuffers::FlatBufferBuilder &fbb,
+    flatbuffers::Offset<apsi::fbs::BinBundle> root) {
+  fbb.FinishSizePrefixed(root);
+}
+
+}  // namespace fbs
+}  // namespace apsi
+
+#endif  // FLATBUFFERS_GENERATED_BINBUNDLE_APSI_FBS_H_
