diff --git APSI-a0/CMakeLists.txt APSI-b0/CMakeLists.txt
index 64a394b..63e11e0 100644
--- APSI-a0/CMakeLists.txt
+++ APSI-b0/CMakeLists.txt
@@ -107,7 +107,7 @@ set(APSI_INCLUDES_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR}/APSI-${APSI_VERSION_MA
 # find_package might throw a FATAL_ERROR before"xxx: not found", e.g. with vcpkg.cmake.
 
 # Microsoft SEAL
-find_package(SEAL 3.7 QUIET REQUIRED)
+find_package(SEAL 4.0 QUIET REQUIRED)
 if(NOT SEAL_FOUND)
     message(FATAL_ERROR "Microsoft SEAL: not found")
 else()
@@ -125,24 +125,26 @@ else()
     message(STATUS "Microsoft Kuku: found")
 endif()
 
+# *** disabled the flatbuffer, use protobuf ***
 # Flatbuffers
-find_package(Flatbuffers REQUIRED)
-if(NOT Flatbuffers_FOUND)
-    message(FATAL_ERROR "Flatbuffers: not found")
-else()
-    message(STATUS "Flatbuffers: found")
-    get_target_property(FLATBUFFERS_FLATC_PATH flatbuffers::flatc IMPORTED_LOCATION_RELEASE)
-    message(STATUS "flatc path: ${FLATBUFFERS_FLATC_PATH}")
-    include(CompileSchemaCXX)
-endif()
-
+#find_package(Flatbuffers REQUIRED)
+#if(NOT Flatbuffers_FOUND)
+#    message(FATAL_ERROR "Flatbuffers: not found")
+#else()
+#    message(STATUS "Flatbuffers: found")
+#    get_target_property(FLATBUFFERS_FLATC_PATH flatbuffers::flatc IMPORTED_LOCATION_RELEASE)
+#    message(STATUS "flatc path: ${FLATBUFFERS_FLATC_PATH}")
+#    include(CompileSchemaCXX)
+#endif()
+
+# *** disabled json config file, auto compute parameter ***
 # jsoncpp: for parameter configuration
-find_package(jsoncpp REQUIRED)
-if (NOT jsoncpp_FOUND)
-    message(FATAL_ERROR "jsoncpp: not found")
-else()
-    message(STATUS "jsoncpp: found")
-endif()
+#find_package(jsoncpp REQUIRED)
+#if (NOT jsoncpp_FOUND)
+#    message(FATAL_ERROR "jsoncpp: not found")
+#else()
+#    message(STATUS "jsoncpp: found")
+#endif()
 
 # [Option] APSI_USE_LOG4CPLUS (default: ON)
 set(APSI_USE_LOG4CPLUS_OPTION_STR "Use Log4cplus for logging")
@@ -157,25 +159,6 @@ if(APSI_USE_LOG4CPLUS)
     endif()
 endif()
 
-# [Option] APSI_USE_ZMQ (default: ON)
-set(APSI_USE_ZMQ_OPTION_STR "Use ZeroMQ for networking")
-option(APSI_USE_ZMQ ${APSI_USE_ZMQ_OPTION_STR} ON)
-if(APSI_USE_ZMQ)
-    # ZeroMQ base
-    find_package(ZeroMQ REQUIRED)
-    if(NOT ZeroMQ_FOUND)
-        message(FATAL_ERROR "ZeroMQ: not found")
-    else()
-        message(STATUS "ZeroMQ: found")
-    endif()
-    # cppzmq wrapper
-    find_package(cppzmq REQUIRED)
-    if(NOT cppzmq_FOUND)
-        message(FATAL_ERROR "cppzmq: not found")
-    else()
-        message(STATUS "cppzmq: found")
-    endif()
-endif()
 
 # [Option] APSI_BUILD_TESTS (default: OFF)
 set(APSI_BUILD_TESTS_OPTION_STR "Build unit and integration tests for APSI")
@@ -248,9 +231,7 @@ apsi_install_target(apsi APSITargets)
 
 target_link_libraries(apsi
     PUBLIC SEAL::seal
-    PUBLIC Kuku::kuku
-    PUBLIC flatbuffers::flatbuffers
-    PUBLIC jsoncpp_static)
+    PUBLIC Kuku::kuku)
 if(APSI_USE_LOG4CPLUS)
     target_link_libraries(apsi PUBLIC log4cplus::log4cplus)
 endif()
diff --git APSI-a0/common/apsi/CMakeLists.txt APSI-b0/common/apsi/CMakeLists.txt
index 3b6d410..cc273ff 100644
--- APSI-a0/common/apsi/CMakeLists.txt
+++ APSI-b0/common/apsi/CMakeLists.txt
@@ -30,7 +30,5 @@ install(
 )
 
 add_subdirectory(fourq)
-add_subdirectory(network)
-add_subdirectory(oprf)
 add_subdirectory(util)
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES} PARENT_SCOPE)
diff --git APSI-a0/common/apsi/fourq/CMakeLists.txt APSI-b0/common/apsi/fourq/CMakeLists.txt
index a60d831..952d91c 100644
--- APSI-a0/common/apsi/fourq/CMakeLists.txt
+++ APSI-b0/common/apsi/fourq/CMakeLists.txt
@@ -3,23 +3,13 @@
 
 # Source files in this directory
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES}
-    ${CMAKE_CURRENT_LIST_DIR}/crypto_util.c
-    ${CMAKE_CURRENT_LIST_DIR}/eccp2_core.c
-    ${CMAKE_CURRENT_LIST_DIR}/eccp2_no_endo.c
-    ${CMAKE_CURRENT_LIST_DIR}/eccp2.c
-    ${CMAKE_CURRENT_LIST_DIR}/hash_to_curve.c
     ${CMAKE_CURRENT_LIST_DIR}/random.c
 )
 
 # Add header files for installation
 install(
     FILES
-        ${CMAKE_CURRENT_LIST_DIR}/FourQ_api.h
-        ${CMAKE_CURRENT_LIST_DIR}/FourQ_internal.h
-        ${CMAKE_CURRENT_LIST_DIR}/FourQ_params.h
-        ${CMAKE_CURRENT_LIST_DIR}/FourQ_tables.h
-        ${CMAKE_CURRENT_LIST_DIR}/FourQ.h
-        ${CMAKE_CURRENT_LIST_DIR}/table_lookup.h
+        ${CMAKE_CURRENT_LIST_DIR}/random.h
     DESTINATION
         ${APSI_INCLUDES_INSTALL_DIR}/apsi/fourq
 )
diff --git APSI-a0/common/apsi/psi_params.cpp APSI-b0/common/apsi/psi_params.cpp
index dc74d46..c92403d 100644
--- APSI-a0/common/apsi/psi_params.cpp
+++ APSI-b0/common/apsi/psi_params.cpp
@@ -9,7 +9,9 @@
 
 // APSI
 #include "apsi/psi_params.h"
+#ifdef USE_FLATBUFFERS
 #include "apsi/psi_params_generated.h"
+#endif
 #include "apsi/version.h"
 #include "apsi/util/utils.h"
 
@@ -179,6 +181,7 @@ namespace apsi {
         bundle_idx_count_ = table_params_.table_size / items_per_bundle_;
     }
 
+#ifdef USE_FLATBUFFERS
     size_t PSIParams::save(ostream &out) const
     {
         flatbuffers::FlatBufferBuilder fbs_builder(128);
@@ -286,6 +289,8 @@ namespace apsi {
 
         return { PSIParams(item_params, table_params, query_params, seal_params), in_data.size() };
     }
+#endif // USE_FLATBUFFERS
+
 #ifndef APSI_DISABLE_JSON
     PSIParams PSIParams::Load(const string &in)
     {
diff --git APSI-a0/common/apsi/psi_params.h APSI-b0/common/apsi/psi_params.h
index 53d5cd4..69c7450 100644
--- APSI-a0/common/apsi/psi_params.h
+++ APSI-b0/common/apsi/psi_params.h
@@ -184,6 +184,7 @@ namespace apsi {
                     item_params_.felts_per_item);
         }
 
+#ifdef USE_FLATBUFFERS	
         /**
         Writes the PSIParams to a stream.
         */
@@ -193,7 +194,7 @@ namespace apsi {
         Reads the PSIParams from a stream.
         */
         static std::pair<PSIParams, std::size_t> Load(std::istream &in);
-
+#endif
         /**
         Reads the PSIParams from a JSON string
         */
diff --git APSI-a0/receiver/apsi/CMakeLists.txt APSI-b0/receiver/apsi/CMakeLists.txt
index afce298..7757b68 100644
--- APSI-a0/receiver/apsi/CMakeLists.txt
+++ APSI-b0/receiver/apsi/CMakeLists.txt
@@ -4,7 +4,6 @@
 # Source files in this directory
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES}
     ${CMAKE_CURRENT_LIST_DIR}/plaintext_powers.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/receiver.cpp
 )
 
 # Add header files for installation
@@ -12,6 +11,7 @@ install(
     FILES
         ${CMAKE_CURRENT_LIST_DIR}/itt.h
         ${CMAKE_CURRENT_LIST_DIR}/match_record.h
+        ${CMAKE_CURRENT_LIST_DIR}/plaintext_powers.h
         ${CMAKE_CURRENT_LIST_DIR}/receiver.h
     DESTINATION
         ${APSI_INCLUDES_INSTALL_DIR}/apsi
diff --git APSI-a0/receiver/apsi/itt.h APSI-b0/receiver/apsi/itt.h
index e683045..105e14c 100644
--- APSI-a0/receiver/apsi/itt.h
+++ APSI-b0/receiver/apsi/itt.h
@@ -20,7 +20,15 @@ namespace apsi {
             create this query. If the given table index was not populated, i.e., there is no
             translation, then this function returns the number of items encoded by this query.
             */
-            std::size_t find_item_idx(std::size_t table_idx) const noexcept;
+            std::size_t find_item_idx(std::size_t table_idx) const noexcept
+            {
+                auto item_idx = table_idx_to_item_idx_.find(table_idx);
+                if (item_idx == table_idx_to_item_idx_.cend()) {
+                    return item_count();
+                }
+
+                return item_idx->second;
+            }
 
             /**
             Returns the number of items encoded by this index translation table.
@@ -30,7 +38,7 @@ namespace apsi {
                 return item_count_;
             }
 
-        private:
+        //private:
             IndexTranslationTable() = default;
 
             std::unordered_map<std::size_t, std::size_t> table_idx_to_item_idx_;
diff --git APSI-a0/sender/apsi/CMakeLists.txt APSI-b0/sender/apsi/CMakeLists.txt
index fd245d7..3cbf684 100644
--- APSI-a0/sender/apsi/CMakeLists.txt
+++ APSI-b0/sender/apsi/CMakeLists.txt
@@ -4,25 +4,16 @@
 # Source files in this directory
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES}
     ${CMAKE_CURRENT_LIST_DIR}/bin_bundle.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/query.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/sender.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/sender_db.cpp
 )
 
 # Add header files for installation
 install(
     FILES
         ${CMAKE_CURRENT_LIST_DIR}/bin_bundle.h
-        ${CMAKE_CURRENT_LIST_DIR}/query.h
-        ${CMAKE_CURRENT_LIST_DIR}/sender.h
-        ${CMAKE_CURRENT_LIST_DIR}/sender_db.h
     DESTINATION
         ${APSI_INCLUDES_INSTALL_DIR}/apsi
 )
 
 add_subdirectory(util)
 
-if(APSI_USE_ZMQ)
-    add_subdirectory(zmq)
-endif()
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES} PARENT_SCOPE)
diff --git APSI-a0/sender/apsi/bin_bundle.cpp APSI-b0/sender/apsi/bin_bundle.cpp
index bb36ef2..1afe9e4 100644
--- APSI-a0/sender/apsi/bin_bundle.cpp
+++ APSI-b0/sender/apsi/bin_bundle.cpp
@@ -10,7 +10,9 @@
 
 // APSI
 #include "apsi/bin_bundle.h"
+#ifdef USE_FLATBUFFERS
 #include "apsi/bin_bundle_generated.h"
+#endif
 #include "apsi/thread_pool_mgr.h"
 #include "apsi/util/interpolate.h"
 #include "apsi/util/utils.h"
@@ -354,7 +356,7 @@ namespace apsi {
             bool compressed)
             : crypto_context(move(context))
         {
-            compr_mode_type compr_mode = compressed ? compr_mode_type::zstd : compr_mode_type::none;
+            compr_mode_type compr_mode = compr_mode_type::none;
 
             // Find the highest degree polynomial in the list. The max degree determines how many
             // Plaintexts we need to make
@@ -1035,6 +1037,7 @@ namespace apsi {
             cache_.felt_interp_polyns.clear();
         }
 
+#ifdef USE_FLATBUFFERS
         namespace {
             flatbuffers::Offset<fbs::FEltArray> fbs_create_felt_array(
                 flatbuffers::FlatBufferBuilder &fbs_builder, const vector<felt_t> &felts)
@@ -1521,5 +1524,6 @@ namespace apsi {
             vector<unsigned char> in_data = read_from_stream(in);
             return load(in_data);
         }
+#endif //USE_FLATBUFFERS
     } // namespace sender
 } // namespace apsi
diff --git APSI-a0/sender/apsi/bin_bundle.h APSI-b0/sender/apsi/bin_bundle.h
index 5a0bcf2..fcefbad 100644
--- APSI-a0/sender/apsi/bin_bundle.h
+++ APSI-b0/sender/apsi/bin_bundle.h
@@ -424,6 +424,7 @@ namespace apsi {
             */
             void strip();
 
+#ifdef USE_FLATBUFFERS	    
             /**
             Saves the BinBundle to a stream.
             */
@@ -438,6 +439,7 @@ namespace apsi {
             Loads the BinBundle from a stream.
             */
             std::pair<std::uint32_t, std::size_t> load(std::istream &in);
-        }; // class BinBundle
+#endif // USE_FLATBUFFERS
+	}; // class BinBundle
     }      // namespace sender
 } // namespace apsi
