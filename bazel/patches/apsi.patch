diff --git a/CMakeLists.txt b/CMakeLists.txt
index 78d54a6..07df321 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -140,24 +140,6 @@ else()
     message(STATUS "Microsoft Kuku: found")
 endif()
 
-# Flatbuffers
-find_package(Flatbuffers REQUIRED)
-if(NOT Flatbuffers_FOUND)
-    message(FATAL_ERROR "Flatbuffers: not found")
-else()
-    message(STATUS "Flatbuffers: found")
-    get_target_property(FLATBUFFERS_FLATC_PATH flatbuffers::flatc IMPORTED_LOCATION_RELEASE)
-    message(STATUS "flatc path: ${FLATBUFFERS_FLATC_PATH}")
-    include(CompileSchemaCXX)
-endif()
-
-# jsoncpp: for parameter configuration
-find_package(jsoncpp REQUIRED)
-if (NOT jsoncpp_FOUND)
-    message(FATAL_ERROR "jsoncpp: not found")
-else()
-    message(STATUS "jsoncpp: found")
-endif()
 
 # [Option] APSI_USE_LOG4CPLUS (default: ON)
 set(APSI_USE_LOG4CPLUS_OPTION_STR "Use Log4cplus for logging")
@@ -263,9 +245,7 @@ apsi_install_target(apsi APSITargets)
 
 target_link_libraries(apsi
     PUBLIC SEAL::seal
-    PUBLIC Kuku::kuku
-    PUBLIC flatbuffers::flatbuffers
-    PUBLIC jsoncpp_static)
+    PUBLIC Kuku::kuku)
 if(APSI_USE_LOG4CPLUS)
     target_link_libraries(apsi PUBLIC log4cplus::log4cplus)
 endif()
diff --git a/common/apsi/CMakeLists.txt b/common/apsi/CMakeLists.txt
index a65bbfe..ee3b975 100644
--- a/common/apsi/CMakeLists.txt
+++ b/common/apsi/CMakeLists.txt
@@ -29,7 +29,5 @@ install(
 )
 
 add_subdirectory(fourq)
-add_subdirectory(network)
-add_subdirectory(oprf)
 add_subdirectory(util)
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES} PARENT_SCOPE)
diff --git a/common/apsi/fourq/CMakeLists.txt b/common/apsi/fourq/CMakeLists.txt
index 3b15780..5085038 100644
--- a/common/apsi/fourq/CMakeLists.txt
+++ b/common/apsi/fourq/CMakeLists.txt
@@ -8,8 +8,21 @@ set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES}
     ${CMAKE_CURRENT_LIST_DIR}/eccp2_no_endo.c
     ${CMAKE_CURRENT_LIST_DIR}/eccp2.c
     ${CMAKE_CURRENT_LIST_DIR}/hash_to_curve.c
+    ${CMAKE_CURRENT_LIST_DIR}/kex.c
     ${CMAKE_CURRENT_LIST_DIR}/random.c
 )
+# Add header files for installation
+install(
+    FILES
+        ${CMAKE_CURRENT_LIST_DIR}/FourQ_api.h
+        ${CMAKE_CURRENT_LIST_DIR}/FourQ_internal.h
+        ${CMAKE_CURRENT_LIST_DIR}/FourQ_params.h
+        ${CMAKE_CURRENT_LIST_DIR}/FourQ_tables.h
+        ${CMAKE_CURRENT_LIST_DIR}/FourQ.h
+        ${CMAKE_CURRENT_LIST_DIR}/table_lookup.h
+    DESTINATION
+        ${APSI_INCLUDES_INSTALL_DIR}/apsi/fourq
+)
 
 if(APSI_FOURQ_AMD64)
     add_subdirectory(amd64)
diff --git a/common/apsi/fourq/kex.c b/common/apsi/fourq/kex.c
new file mode 100644
index 0000000..5c37c60
--- /dev/null
+++ b/common/apsi/fourq/kex.c
@@ -0,0 +1,181 @@
+/********************************************************************************
+* FourQlib: a high-performance crypto library based on the elliptic curve FourQ
+*
+*    Copyright (c) Microsoft Corporation. All rights reserved.
+*
+* Abstract: Diffie-Hellman key exchange based on FourQ
+*           option 1: co-factor ecdh using compressed 32-byte public keys,
+*           (see https://datatracker.ietf.org/doc/draft-ladd-cfrg-4q/).         
+*           option 2: co-factor ecdh using uncompressed, 64-byte public keys. 
+*********************************************************************************/
+
+#include "apsi/fourq/FourQ_internal.h"
+#include "apsi/fourq/FourQ_params.h"
+#include "apsi/fourq/random.h"
+#include <string.h>
+
+
+static __inline bool is_neutral_point(point_t P)
+{ // Is P the neutral point (0,1)?
+  // SECURITY NOTE: this function does not run in constant time (input point P is assumed to be public).
+  
+    if (is_zero_ct((digit_t*)P->x, 2*NWORDS_FIELD) && is_zero_ct(&((digit_t*)P->y)[1], 2*NWORDS_FIELD-1) && is_digit_zero_ct(P->y[0][0] - 1)) {  
+		return true;
+    }
+    return false;
+}
+
+
+/*************** ECDH USING COMPRESSED, 32-BYTE PUBLIC KEYS ***************/
+
+ECCRYPTO_STATUS CompressedPublicKeyGeneration(const unsigned char* SecretKey, unsigned char* PublicKey)
+{ // Compressed public key generation for key exchange
+  // It produces a public key PublicKey, which is the encoding of P = SecretKey*G (G is the generator).
+  // Input:  32-byte SecretKey
+  // Output: 32-byte PublicKey
+    point_t P;
+    
+    ecc_mul_fixed((digit_t*)SecretKey, P);  // Compute public key                                       
+	encode(P, PublicKey);                   // Encode public key
+
+    return ECCRYPTO_SUCCESS;
+}
+
+
+ECCRYPTO_STATUS CompressedKeyGeneration(unsigned char* SecretKey, unsigned char* PublicKey)
+{ // Keypair generation for key exchange. Public key is compressed to 32 bytes
+  // It produces a private key SecretKey and a public key PublicKey, which is the encoding of P = SecretKey*G (G is the generator).
+  // Outputs: 32-byte SecretKey and 32-byte PublicKey 
+    ECCRYPTO_STATUS Status = ECCRYPTO_ERROR_UNKNOWN;
+
+	Status = RandomBytesFunction(SecretKey, 32);
+	if (Status != ECCRYPTO_SUCCESS) {
+		goto cleanup;
+	}
+  
+    Status = CompressedPublicKeyGeneration(SecretKey, PublicKey);
+    if (Status != ECCRYPTO_SUCCESS) {
+        goto cleanup;
+    }
+
+    return ECCRYPTO_SUCCESS;
+
+cleanup:
+    clear_words((unsigned int*)SecretKey, 256/(sizeof(unsigned int)*8));
+    clear_words((unsigned int*)PublicKey, 256/(sizeof(unsigned int)*8));
+
+    return Status;
+}
+
+
+ECCRYPTO_STATUS CompressedSecretAgreement(const unsigned char* SecretKey, const unsigned char* PublicKey, unsigned char* SharedSecret)
+{ // Secret agreement computation for key exchange using a compressed, 32-byte public key
+  // The output is the y-coordinate of SecretKey*A, where A is the decoding of the public key PublicKey.   
+  // Inputs: 32-byte SecretKey and 32-byte PublicKey
+  // Output: 32-byte SharedSecret
+    point_t A;
+    ECCRYPTO_STATUS Status = ECCRYPTO_ERROR_UNKNOWN;
+
+    if ((PublicKey[15] & 0x80) != 0) {  // Is bit128(PublicKey) = 0?
+		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
+		goto cleanup;
+    }
+
+	Status = decode(PublicKey, A);    // Also verifies that A is on the curve. If it is not, it fails
+	if (Status != ECCRYPTO_SUCCESS) {
+		goto cleanup;
+	}
+         
+    Status = ecc_mul(A, (digit_t*)SecretKey, A, true);
+	if (Status != ECCRYPTO_SUCCESS) {
+		goto cleanup;
+	}
+
+    if (is_neutral_point(A)) {  // Is output = neutral point (0,1)?
+		Status = ECCRYPTO_ERROR_SHARED_KEY;
+		goto cleanup;
+    }
+  
+	memmove(SharedSecret, (unsigned char*)A->y, 32);
+
+	return ECCRYPTO_SUCCESS;
+    
+cleanup:
+    clear_words((unsigned int*)SharedSecret, 256/(sizeof(unsigned int)*8));
+    
+    return Status;
+}
+
+
+/*************** ECDH USING UNCOMPRESSED PUBLIC KEYS ***************/
+
+ECCRYPTO_STATUS PublicKeyGeneration(const unsigned char* SecretKey, unsigned char* PublicKey)
+{ // Public key generation for key exchange
+  // It produces the public key PublicKey = SecretKey*G, where G is the generator.
+  // Input:  32-byte SecretKey
+  // Output: 64-byte PublicKey
+
+	ecc_mul_fixed((digit_t*)SecretKey, (point_affine*)PublicKey);  // Compute public key
+
+	return ECCRYPTO_SUCCESS;
+}
+
+
+ECCRYPTO_STATUS KeyGeneration(unsigned char* SecretKey, unsigned char* PublicKey)
+{ // Keypair generation for key exchange
+  // It produces a private key SecretKey and computes the public key PublicKey = SecretKey*G, where G is the generator.
+  // Outputs: 32-byte SecretKey and 64-byte PublicKey 
+	ECCRYPTO_STATUS Status = ECCRYPTO_ERROR_UNKNOWN;
+
+	Status = RandomBytesFunction(SecretKey, 32);
+	if (Status != ECCRYPTO_SUCCESS) {
+		goto cleanup;
+	}
+
+	Status = PublicKeyGeneration(SecretKey, PublicKey);
+	if (Status != ECCRYPTO_SUCCESS) {
+		goto cleanup;
+	}
+
+	return ECCRYPTO_SUCCESS;
+
+cleanup:
+	clear_words((unsigned int*)SecretKey, 256/(sizeof(unsigned int)*8));
+	clear_words((unsigned int*)PublicKey, 512/(sizeof(unsigned int)*8));
+
+	return Status;
+}
+
+
+ECCRYPTO_STATUS SecretAgreement(const unsigned char* SecretKey, const unsigned char* PublicKey, unsigned char* SharedSecret)
+{ // Secret agreement computation for key exchange
+  // The output is the y-coordinate of SecretKey*PublicKey. 
+  // Inputs: 32-byte SecretKey and 64-byte PublicKey
+  // Output: 32-byte SharedSecret
+	point_t A;
+	ECCRYPTO_STATUS Status = ECCRYPTO_ERROR_UNKNOWN;
+
+    if (((PublicKey[15] & 0x80) != 0) || ((PublicKey[31] & 0x80) != 0) || ((PublicKey[47] & 0x80) != 0) || ((PublicKey[63] & 0x80) != 0)) {  // Are PublicKey_x[i] and PublicKey_y[i] < 2^127?
+		Status = ECCRYPTO_ERROR_INVALID_PARAMETER;
+		goto cleanup;
+    }
+
+	Status = ecc_mul((point_affine*)PublicKey, (digit_t*)SecretKey, A, true);  // Also verifies that PublicKey is a point on the curve. If it is not, it fails
+	if (Status != ECCRYPTO_SUCCESS) {
+		goto cleanup;
+	}
+
+    if (is_neutral_point(A)) {  // Is output = neutral point (0,1)?
+		Status = ECCRYPTO_ERROR_SHARED_KEY;
+		goto cleanup;
+    }
+  
+	memmove(SharedSecret, (unsigned char*)A->y, 32);
+
+	return ECCRYPTO_SUCCESS;
+
+cleanup:
+	clear_words((unsigned int*)SharedSecret, 256/(sizeof(unsigned int)*8));
+
+	return Status;
+}
diff --git a/receiver/apsi/CMakeLists.txt b/receiver/apsi/CMakeLists.txt
index afce298..7757b68 100644
--- a/receiver/apsi/CMakeLists.txt
+++ b/receiver/apsi/CMakeLists.txt
@@ -4,7 +4,6 @@
 # Source files in this directory
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES}
     ${CMAKE_CURRENT_LIST_DIR}/plaintext_powers.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/receiver.cpp
 )
 
 # Add header files for installation
@@ -12,6 +11,7 @@ install(
     FILES
         ${CMAKE_CURRENT_LIST_DIR}/itt.h
         ${CMAKE_CURRENT_LIST_DIR}/match_record.h
+        ${CMAKE_CURRENT_LIST_DIR}/plaintext_powers.h
         ${CMAKE_CURRENT_LIST_DIR}/receiver.h
     DESTINATION
         ${APSI_INCLUDES_INSTALL_DIR}/apsi
diff --git a/receiver/apsi/itt.h b/receiver/apsi/itt.h
index e683045..105e14c 100644
--- a/receiver/apsi/itt.h
+++ b/receiver/apsi/itt.h
@@ -20,7 +20,15 @@ namespace apsi {
             create this query. If the given table index was not populated, i.e., there is no
             translation, then this function returns the number of items encoded by this query.
             */
-            std::size_t find_item_idx(std::size_t table_idx) const noexcept;
+            std::size_t find_item_idx(std::size_t table_idx) const noexcept
+            {
+                auto item_idx = table_idx_to_item_idx_.find(table_idx);
+                if (item_idx == table_idx_to_item_idx_.cend()) {
+                    return item_count();
+                }
+
+                return item_idx->second;
+            }
 
             /**
             Returns the number of items encoded by this index translation table.
@@ -30,7 +38,7 @@ namespace apsi {
                 return item_count_;
             }
 
-        private:
+        //private:
             IndexTranslationTable() = default;
 
             std::unordered_map<std::size_t, std::size_t> table_idx_to_item_idx_;
diff --git a/sender/apsi/CMakeLists.txt b/sender/apsi/CMakeLists.txt
index fd245d7..99e4228 100644
--- a/sender/apsi/CMakeLists.txt
+++ b/sender/apsi/CMakeLists.txt
@@ -4,18 +4,12 @@
 # Source files in this directory
 set(APSI_SOURCE_FILES ${APSI_SOURCE_FILES}
     ${CMAKE_CURRENT_LIST_DIR}/bin_bundle.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/query.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/sender.cpp
-    ${CMAKE_CURRENT_LIST_DIR}/sender_db.cpp
 )
 
 # Add header files for installation
 install(
     FILES
         ${CMAKE_CURRENT_LIST_DIR}/bin_bundle.h
-        ${CMAKE_CURRENT_LIST_DIR}/query.h
-        ${CMAKE_CURRENT_LIST_DIR}/sender.h
-        ${CMAKE_CURRENT_LIST_DIR}/sender_db.h
     DESTINATION
         ${APSI_INCLUDES_INSTALL_DIR}/apsi
 )
