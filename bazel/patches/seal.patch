diff --git a/native/src/seal/serializable.h b/native/src/seal/serializable.h
index a940190..e490b30 100644
--- a/native/src/seal/serializable.h
+++ b/native/src/seal/serializable.h
@@ -135,6 +135,9 @@ namespace seal
             return obj_.save(out, size, compr_mode);
         }

+        const T& obj() const { return obj_; }
+
+        T& obj() { return obj_; }
     private:
         Serializable(T &&obj) : obj_(std::move(obj))
         {}

diff --git a/native/src/seal/util/rns.cpp b/native/src/seal/util/rns.cpp
index 35e72ff..77e9acd 100644
--- a/native/src/seal/util/rns.cpp
+++ b/native/src/seal/util/rns.cpp
@@ -1039,12 +1039,13 @@ namespace seal

         void RNSTool::decrypt_scale_and_round(ConstRNSIter input, CoeffIter destination, MemoryPoolHandle pool) const
         {
+            size_t n = input.poly_modulus_degree();
 #ifdef SEAL_DEBUG
             if (input == nullptr)
             {
                 throw invalid_argument("input cannot be null");
             }
-            if (input.poly_modulus_degree() != coeff_count_)
+            if (n > coeff_count_)
             {
                 throw invalid_argument("input is not valid for encryption parameters");
             }
@@ -1061,13 +1062,13 @@ namespace seal
             size_t base_t_gamma_size = base_t_gamma_->size();

             // Compute |gamma * t|_qi * ct(s)
-            SEAL_ALLOCATE_GET_RNS_ITER(temp, coeff_count_, base_q_size, pool);
+            SEAL_ALLOCATE_GET_RNS_ITER(temp, n, base_q_size, pool);
             SEAL_ITERATE(iter(input, prod_t_gamma_mod_q_, base_q_->base(), temp), base_q_size, [&](auto I) {
-                multiply_poly_scalar_coeffmod(get<0>(I), coeff_count_, get<1>(I), get<2>(I), get<3>(I));
+                multiply_poly_scalar_coeffmod(get<0>(I), n, get<1>(I), get<2>(I), get<3>(I));
             });

             // Make another temp destination to get the poly in mod {t, gamma}
-            SEAL_ALLOCATE_GET_RNS_ITER(temp_t_gamma, coeff_count_, base_t_gamma_size, pool);
+            SEAL_ALLOCATE_GET_RNS_ITER(temp_t_gamma, n, base_t_gamma_size, pool);

             // Convert from q to {t, gamma}
             base_q_to_t_gamma_conv_->fast_convert_array(temp, temp_t_gamma, pool);
@@ -1075,9 +1076,7 @@ namespace seal
             // Multiply by -prod(q)^(-1) mod {t, gamma}
             SEAL_ITERATE(
                 iter(temp_t_gamma, neg_inv_q_mod_t_gamma_, base_t_gamma_->base(), temp_t_gamma), base_t_gamma_size,
-                [&](auto I) {
-                    multiply_poly_scalar_coeffmod(get<0>(I), coeff_count_, get<1>(I), get<2>(I), get<3>(I));
-                });
+                [&](auto I) { multiply_poly_scalar_coeffmod(get<0>(I), n, get<1>(I), get<2>(I), get<3>(I)); });

             // Need to correct values in temp_t_gamma (gamma component only) which are
             // larger than floor(gamma/2)
@@ -1085,7 +1084,7 @@ namespace seal

             // Now compute the subtraction to remove error and perform final multiplication by
             // gamma inverse mod t
-            SEAL_ITERATE(iter(temp_t_gamma[0], temp_t_gamma[1], destination), coeff_count_, [&](auto I) {
+            SEAL_ITERATE(iter(temp_t_gamma[0], temp_t_gamma[1], destination), n, [&](auto I) {
                 // Need correction because of centered mod
                 if (get<1>(I) > gamma_div_2)
                 {

diff --git a/native/src/seal/encryptionparams.cpp b/native/src/seal/encryptionparams.cpp
index 923765b..027c205 100644
--- a/native/src/seal/encryptionparams.cpp
+++ b/native/src/seal/encryptionparams.cpp
@@ -128,7 +128,7 @@ namespace seal
         size_t total_uint64_count = add_safe(
             size_t(1), // scheme
             size_t(1), // poly_modulus_degree
-            coeff_modulus_size, plain_modulus_.uint64_count());
+            coeff_modulus_size);

         auto param_data(allocate_uint(total_uint64_count, pool_));
         uint64_t *param_data_ptr = param_data.get();
@@ -144,8 +144,9 @@ namespace seal
             *param_data_ptr++ = mod.value();
         }

-        set_uint(plain_modulus_.data(), plain_modulus_.uint64_count(), param_data_ptr);
-        param_data_ptr += plain_modulus_.uint64_count();
+        // NOTE(juhou): we skip the plain modulus for parms_id
+        // set_uint(plain_modulus_.data(), plain_modulus_.uint64_count(), param_data_ptr);
+        // param_data_ptr += plain_modulus_.uint64_count();

         HashFunction::hash(param_data.get(), total_uint64_count, parms_id_);

