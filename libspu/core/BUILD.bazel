# Copyright 2021 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:spu.bzl", "spu_cc_library", "spu_cc_test")

package(default_visibility = ["//visibility:public"])

spu_cc_library(
    name = "core",
    deps = [
        ":array_ref",
        ":encoding",
        ":ndarray_ref",
        ":shape_util",
        ":type",
        ":type_util",
        ":xt_helper",
        "@yacl//yacl/base:buffer",
    ],
)

spu_cc_library(
    name = "trace",
    srcs = ["trace.cc"],
    hdrs = ["trace.h"],
    deps = [
        "//libspu/core:prelude",
        "@com_google_absl//absl/types:span",
        "@yacl//yacl/utils:scope_guard",
    ],
)

spu_cc_test(
    name = "trace_test",
    srcs = ["trace_test.cc"],
    deps = [
        ":trace",
        "//libspu/core:prelude",
    ],
)

spu_cc_library(
    name = "prelude",
    srcs = [],
    hdrs = ["prelude.h"],
    deps = [
        "@yacl//yacl/base:exception",
        "@yacl//yacl/utils:scope_guard",
    ],
)

spu_cc_library(
    name = "type_util",
    srcs = ["type_util.cc"],
    hdrs = ["type_util.h"],
    deps = [
        "//libspu:spu_cc_proto",
        "//libspu/core:prelude",
        "@com_google_absl//absl/types:span",
        "@yacl//yacl/base:int128",
    ],
)

spu_cc_library(
    name = "encoding",
    srcs = ["encoding.cc"],
    hdrs = ["encoding.h"],
    deps = [
        ":array_ref",
        ":ndarray_ref",
        ":parallel_utils",
        ":xt_helper",
        "@yacl//yacl/crypto/tools:prg",
        "@yacl//yacl/utils:parallel",
    ],
)

spu_cc_test(
    name = "encoding_test",
    srcs = ["encoding_test.cc"],
    deps = [
        ":encoding",
        ":xt_helper",
    ],
)

spu_cc_library(
    name = "shape_util",
    srcs = ["shape_util.cc"],
    hdrs = ["shape_util.h"],
    deps = [
        "//libspu/core:prelude",
    ],
)

spu_cc_test(
    name = "shape_util_test",
    srcs = ["shape_util_test.cc"],
    deps = [
        ":shape_util",
    ],
)

spu_cc_library(
    name = "type",
    srcs = ["type.cc"],
    hdrs = ["type.h"],
    deps = [
        ":type_util",
        "//libspu/core:prelude",
    ],
)

spu_cc_test(
    name = "type_test",
    srcs = ["type_test.cc"],
    deps = [
        ":type",
    ],
)

spu_cc_library(
    name = "array_ref",
    srcs = ["array_ref.cc"],
    hdrs = ["array_ref.h"],
    deps = [
        ":bit_utils",
        ":parallel_utils",
        ":type",
        ":vectorize",
        "//libspu/core:prelude",
        "@yacl//yacl/base:buffer",
    ],
)

spu_cc_test(
    name = "array_ref_test",
    srcs = ["array_ref_test.cc"],
    deps = [
        ":array_ref",
    ],
)

spu_cc_library(
    name = "ndarray_ref",
    srcs = ["ndarray_ref.cc"],
    hdrs = ["ndarray_ref.h"],
    deps = [
        ":array_ref",
        ":parallel_utils",
        ":shape_util",
        ":type",
        "//libspu/core:prelude",
        "@yacl//yacl/base:buffer",
    ],
)

spu_cc_test(
    name = "ndarray_ref_test",
    srcs = ["ndarray_ref_test.cc"],
    deps = [
        ":ndarray_ref",
    ],
)

spu_cc_library(
    name = "xt_helper",
    srcs = ["xt_helper.cc"],
    hdrs = ["xt_helper.h"],
    deps = [
        ":array_ref",
        ":ndarray_ref",
        ":shape_util",
        "@com_github_xtensor_xtensor//:xtensor",
        "@yacl//yacl/crypto/tools:prg",
    ],
)

spu_cc_test(
    name = "xt_helper_test",
    srcs = ["xt_helper_test.cc"],
    deps = [
        ":xt_helper",
    ],
)

spu_cc_library(
    name = "vectorize",
    hdrs = ["vectorize.h"],
    deps = [
        "//libspu/core:prelude",
        "@com_google_absl//absl/types:span",
    ],
)

spu_cc_test(
    name = "vectorize_test",
    srcs = ["vectorize_test.cc"],
    deps = [
        ":vectorize",
    ],
)

spu_cc_library(
    name = "parallel_utils",
    srcs = ["parallel_utils.cc"],
    hdrs = ["parallel_utils.h"],
    deps = [
        "@llvm-project//llvm:Support",
        "@yacl//yacl/utils:parallel",
    ],
)

spu_cc_library(
    name = "logging",
    srcs = ["logging.cc"],
    hdrs = ["logging.h"],
    deps = [
        "//libspu/core:prelude",
        "@com_github_brpc_brpc//:butil",
        "@com_github_fmtlib_fmt//:fmtlib",
    ],
)

spu_cc_library(
    name = "platform_utils",
    srcs = ["platform_utils.cc"],
    hdrs = ["platform_utils.h"],
    copts = select({
        "@platforms//cpu:aarch64": [""],
        "//conditions:default": [
            "-mbmi2",
        ],
    }),
    deps = select({
        "@platforms//cpu:x86_64": [
            "@com_github_google_cpu_features//:cpu_features",
        ],
        "//conditions:default": [],
    }),
)

spu_cc_library(
    name = "bit_utils",
    hdrs = ["bit_utils.h"],
    deps = [
        "@com_google_absl//absl/numeric:bits",
    ],
)

spu_cc_test(
    name = "bit_utils_test",
    srcs = ["bit_utils_test.cc"],
    deps = [
        ":bit_utils",
        "@yacl//yacl/base:int128",
    ],
)
