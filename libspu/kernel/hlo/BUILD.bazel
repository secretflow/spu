# Copyright 2022 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:spu.bzl", "spu_cc_library", "spu_cc_test")

package(default_visibility = ["//visibility:public"])

spu_cc_library(
    name = "hlo",
    deps = [
        ":basic_binary",
        ":basic_ternary",
        ":basic_unary",
        ":casting",
        ":const",
        ":control_flow",
        ":convolution",
        ":geometrical",
        ":indexing",
        ":rand",
        ":reduce",
        ":select_and_scatter",
        ":shift",
        ":sort",
    ],
)

spu_cc_library(
    name = "basic_binary",
    srcs = ["basic_binary.cc"],
    hdrs = ["basic_binary.h"],
    deps = [
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_test(
    name = "basic_binary_test",
    srcs = ["basic_binary_test.cc"],
    deps = [
        ":basic_binary",
        ":const",
        ":test_utils",
        "//libspu/kernel/hal",
        "//libspu/mpc/utils:simulate",
    ],
)

spu_cc_library(
    name = "basic_ternary",
    srcs = ["basic_ternary.cc"],
    hdrs = ["basic_ternary.h"],
    deps = [
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_test(
    name = "basic_ternary_test",
    srcs = ["basic_ternary_test.cc"],
    deps = [
        ":basic_ternary",
        ":const",
        ":test_utils",
        "//libspu/kernel/hal",
        "//libspu/mpc/utils:simulate",
    ],
)

spu_cc_library(
    name = "basic_unary",
    srcs = ["basic_unary.cc"],
    hdrs = ["basic_unary.h"],
    deps = [
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_test(
    name = "basic_unary_test",
    srcs = ["basic_unary_test.cc"],
    deps = [
        ":basic_unary",
        ":const",
        ":test_utils",
        "//libspu/kernel/hal",
        "//libspu/mpc/utils:simulate",
    ],
)

spu_cc_library(
    name = "casting",
    srcs = ["casting.cc"],
    hdrs = ["casting.h"],
    deps = [
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_test(
    name = "casting_test",
    srcs = ["casting_test.cc"],
    deps = [
        ":casting",
        ":const",
        "//libspu/kernel/hal:test_util",
    ],
)

spu_cc_library(
    name = "const",
    srcs = ["const.cc"],
    hdrs = ["const.h"],
    deps = [
        ":casting",
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_test(
    name = "const_test",
    srcs = ["const_test.cc"],
    deps = [
        ":const",
        "//libspu/kernel/hal:test_util",
    ],
)

spu_cc_library(
    name = "control_flow",
    srcs = ["control_flow.cc"],
    hdrs = ["control_flow.h"],
    deps = [
        ":const",
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_library(
    name = "convolution",
    srcs = ["convolution.cc"],
    hdrs = ["convolution.h"],
    deps = [
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_library(
    name = "indexing",
    srcs = ["indexing.cc"],
    hdrs = ["indexing.h"],
    deps = [
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_test(
    name = "indexing_test",
    srcs = ["indexing_test.cc"],
    deps = [
        ":const",
        ":indexing",
        "//libspu/kernel/hal:test_util",
    ],
)

spu_cc_library(
    name = "geometrical",
    srcs = ["geometrical.cc"],
    hdrs = ["geometrical.h"],
    deps = [
        ":basic_binary",
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_test(
    name = "geometrical_test",
    srcs = ["geometrical_test.cc"],
    deps = [
        ":const",
        ":geometrical",
        ":test_utils",
        "//libspu/mpc/utils:simulate",
    ],
)

spu_cc_library(
    name = "rand",
    srcs = ["rand.cc"],
    hdrs = ["rand.h"],
    deps = [
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_library(
    name = "reduce",
    srcs = ["reduce.cc"],
    hdrs = ["reduce.h"],
    deps = [
        ":geometrical",
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_library(
    name = "select_and_scatter",
    srcs = ["select_and_scatter.cc"],
    hdrs = ["select_and_scatter.h"],
    deps = [
        ":const",
        ":reduce",
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_library(
    name = "shift",
    srcs = ["shift.cc"],
    hdrs = ["shift.h"],
    deps = [
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_library(
    name = "sort",
    srcs = ["sort.cc"],
    hdrs = ["sort.h"],
    deps = [
        ":basic_binary",
        ":casting",
        ":utils",
        "//libspu/kernel/hal",
    ],
)

spu_cc_test(
    name = "sort_test",
    srcs = ["sort_test.cc"],
    deps = [
        ":sort",
        "//libspu/kernel/hal:polymorphic",
        "//libspu/kernel/hal:test_util",
    ],
)

spu_cc_library(
    name = "utils",
    srcs = ["utils.cc"],
    hdrs = ["utils.h"],
    deps = [
        "//libspu/kernel/hal",
    ],
)

spu_cc_library(
    name = "shuffle",
    srcs = ["shuffle.cc"],
    hdrs = ["shuffle.h"],
    deps = [
        ":sort",
        "//libspu/kernel/hal",
    ],
)

spu_cc_test(
    name = "shuffle_test",
    srcs = ["shuffle_test.cc"],
    deps = [
        ":shuffle",
        "//libspu/kernel/hal:test_util",
    ],
)

spu_cc_library(
    name = "test_utils",
    hdrs = ["test_utils.h"],
    deps = [
        "//libspu:spu_cc_proto",
    ],
)
