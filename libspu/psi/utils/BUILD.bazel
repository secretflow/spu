# Copyright 2022 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:spu.bzl", "spu_cc_library", "spu_cc_test")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@rules_cc//cc:defs.bzl", "cc_proto_library")
load("@yacl//bazel:yacl.bzl", "EMP_COPT_FLAGS")

package(default_visibility = ["//visibility:public"])

spu_cc_library(
    name = "scope_disk_cache",
    srcs = ["scope_disk_cache.cc"],
    hdrs = ["scope_disk_cache.h"],
    deps = [
        "//libspu/core:prelude",
        "//libspu/psi/io",
        "@llvm-project//llvm:Support",
    ],
)

spu_cc_library(
    name = "hash_bucket_cache",
    srcs = ["hash_bucket_cache.cc"],
    hdrs = ["hash_bucket_cache.h"],
    deps = [
        ":scope_disk_cache",
        "//libspu/psi/utils:batch_provider",
        "@com_google_absl//absl/strings",
    ],
)

spu_cc_library(
    name = "csv_checker",
    srcs = ["csv_checker.cc"],
    hdrs = ["csv_checker.h"],
    deps = [
        "//libspu/core:prelude",
        "//libspu/psi/io",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
        "@yacl//yacl/crypto/base/hash:hash_utils",
        "@yacl//yacl/utils:scope_guard",
    ],
)

spu_cc_library(
    name = "serialize",
    hdrs = ["serialize.h"],
    deps = [
        ":serializable_cc_proto",
        "@yacl//yacl/base:buffer",
    ],
)

proto_library(
    name = "serializable_proto",
    srcs = ["serializable.proto"],
)

cc_proto_library(
    name = "serializable_cc_proto",
    deps = [":serializable_proto"],
)

spu_cc_library(
    name = "csv_header_analyzer",
    hdrs = ["csv_header_analyzer.h"],
    deps = [
        "//libspu/core:prelude",
    ],
)

spu_cc_test(
    name = "csv_checker_test",
    srcs = ["csv_checker_test.cc"],
    deps = [
        ":csv_checker",
    ],
)

spu_cc_library(
    name = "cipher_store",
    srcs = ["cipher_store.cc"],
    hdrs = ["cipher_store.h"],
    linkopts = select({
        "@bazel_tools//src/conditions:darwin": [],
        "//conditions:default": ["-fopenmp"],
    }),
    deps = [
        ":hash_bucket_cache",
    ] + select({
        "@bazel_tools//src/conditions:darwin_x86_64": ["@local_homebrew_x64//:openmp"],
        "@bazel_tools//src/conditions:darwin_arm64": ["@local_homebrew_arm64//:openmp"],
        "//conditions:default": [],
    }),
)

spu_cc_library(
    name = "batch_provider",
    srcs = ["batch_provider.cc"],
    hdrs = ["batch_provider.h"],
    deps = [
        ":csv_header_analyzer",
        ":utils",
        "//libspu/core:prelude",
        "//libspu/psi/io",
        "@com_google_absl//absl/strings",
        "@yacl//yacl/crypto/utils:rand",
    ],
)

spu_cc_library(
    name = "resource",
    srcs = ["resource.cc"],
    hdrs = ["resource.h"],
    deps = [
        ":hash_bucket_cache",
        "//libspu/core:prelude",
        "@com_google_absl//absl/strings",
    ],
)

spu_cc_library(
    name = "test_utils",
    hdrs = [
        "test_utils.h",
    ],
    deps = [
        "//libspu/psi:psi_cc_proto",
        "@yacl//yacl/crypto/base/hash:hash_utils",
    ],
)

spu_cc_library(
    name = "utils",
    srcs = ["utils.cc"],
    hdrs = ["utils.h"],
    deps = [
        ":csv_header_analyzer",
        ":serialize",
        "//libspu/core:prelude",
        "//libspu/psi/io",
        "@yacl//yacl/crypto/utils:rand",
        "@yacl//yacl/link",
    ],
)


    
spu_cc_library(
    name = "emp_io_adapter",
    srcs = ["emp_io_adapter.cc"],
    hdrs = [
        "emp_io_adapter.h",
    ],
    deps = [
        "@com_github_emptoolkit_emp_tool//:emp-tool",
        "@yacl//yacl/link",
    ],
)

spu_cc_test(
    name = "emp_io_adapter_test",
    srcs = ["emp_io_adapter_test.cc"],
    copts = EMP_COPT_FLAGS,
    deps = [
        "emp_io_adapter",
    ],
)

spu_cc_library(
    name = "ub_psi_cache",
    srcs = ["ub_psi_cache.cc"],
    hdrs = ["ub_psi_cache.h"],
    deps = [
        ":batch_provider",
        "//libspu/core:prelude",
        "//libspu/psi/io",
    ],
)

spu_cc_test(
    name = "ub_psi_cache_test",
    srcs = ["ub_psi_cache_test.cc"],
    deps = [
        ":ub_psi_cache",
        "@com_google_absl//absl/time",
        "@yacl//yacl/crypto/utils:rand",
    ],
)
