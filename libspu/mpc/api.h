// Copyright 2021 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <optional>

#include "libspu/core/context.h"
#include "libspu/core/value.h"

namespace spu::mpc {

// TODO: add to naming conventions.
// - use x,y,z for value
// - use a,b,c for type
// - follow current module style.

// Convert a public to a secret.
//
// In most of cases, you should not do this, becasue:
// 1. This only convert the 'type' to secret, but partipants still knows its
//    value at the moment.
// 2. Nearly all ops has public parameter overload, we should use it directly.
Value p2s(SPUContext* ctx, const Value& x);

// Convert a secret to a public, aka, reveal.
//
// Note: this API indicates information leak.
Value s2p(SPUContext* ctx, const Value& x);

// Import will be called on all parameters at the beginning program.
//
// The import stage can be used:
// - for malicious protocols, adding party privately generated mac.
// - sharing conversion, import shares generated by other protocols.
//
// @param ctx, the evaluation context.
// @param in, the type may not be of current protocol's type, but
//            it should be a Secret type.
Value import_s(SPUContext* ctx, const Value& in);

// Export a secret value as a given type.
//
// The export stage can be used:
// - strip party private information.
// - sharing conversion, export shares for other protocols.
//
// @param ctx, the evaluation context.
// @param in, the input should be one of current protocol's type.
// @param as_type, the target type, it should be a Secret type.
Value export_s(SPUContext* ctx, const Value& in, const Type& as_type);

// Get the common type of secrets.
//
// Unlike public types, which has only one form, secrets has multiple storage
// formats, like AShare/BShare, which make them not concatable.
//
// This api calculate the common type.
Type common_type_s(SPUContext* ctx, const Type& a, const Type& b);
Value cast_type_s(SPUContext* ctx, const Value& frm, const Type& to_type);

// Make a public variable with given plaintext input.
//
// All parties knowns the value.
Value make_p(SPUContext* ctx, uint128_t init, const Shape& shape);

// parties random a public together.
Value rand_p(SPUContext* ctx, const Shape& shape);
Value rand_s(SPUContext* ctx, const Shape& shape);

// Compute bitwise_not(invert) of a value in ring 2k space.
Value not_p(SPUContext* ctx, const Value& x);
Value not_s(SPUContext* ctx, const Value& x);

Value msb_p(SPUContext* ctx, const Value& x);
Value msb_s(SPUContext* ctx, const Value& x);

Value equal_pp(SPUContext* ctx, const Value& x, const Value& y);
// Optional API, return nullopt if no valid kernel found.
std::optional<Value> equal_sp(SPUContext* ctx, const Value& x, const Value& y);
std::optional<Value> equal_ss(SPUContext* ctx, const Value& x, const Value& y);

Value add_pp(SPUContext* ctx, const Value& x, const Value& y);
Value add_sp(SPUContext* ctx, const Value& x, const Value& y);
Value add_ss(SPUContext* ctx, const Value& x, const Value& y);

Value mul_pp(SPUContext* ctx, const Value& x, const Value& y);
Value mul_sp(SPUContext* ctx, const Value& x, const Value& y);
Value mul_ss(SPUContext* ctx, const Value& x, const Value& y);

Value and_pp(SPUContext* ctx, const Value& x, const Value& y);
Value and_sp(SPUContext* ctx, const Value& x, const Value& y);
Value and_ss(SPUContext* ctx, const Value& x, const Value& y);

Value xor_pp(SPUContext* ctx, const Value& x, const Value& y);
Value xor_sp(SPUContext* ctx, const Value& x, const Value& y);
Value xor_ss(SPUContext* ctx, const Value& x, const Value& y);

Value mmul_pp(SPUContext* ctx, const Value& x, const Value& y, size_t m,
              size_t n, size_t k);
Value mmul_sp(SPUContext* ctx, const Value& x, const Value& y, size_t m,
              size_t n, size_t k);
Value mmul_ss(SPUContext* ctx, const Value& x, const Value& y, size_t m,
              size_t n, size_t k);

Value lshift_p(SPUContext* ctx, const Value& x, size_t nbits);
Value lshift_s(SPUContext* ctx, const Value& x, size_t nbits);

Value rshift_p(SPUContext* ctx, const Value& x, size_t nbits);
Value rshift_s(SPUContext* ctx, const Value& x, size_t nbits);

Value arshift_p(SPUContext* ctx, const Value& x, size_t nbits);
Value arshift_s(SPUContext* ctx, const Value& x, size_t nbits);
Value trunc_p(SPUContext* ctx, const Value& x, size_t nbits);
Value trunc_s(SPUContext* ctx, const Value& x, size_t nbits);

// Reverse bit, like MISP BITREV instruction, and linux bitrev library.
Value bitrev_s(SPUContext* ctx, const Value& x, size_t start, size_t end);
Value bitrev_p(SPUContext* ctx, const Value& x, size_t start, size_t end);

}  // namespace spu::mpc
