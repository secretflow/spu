# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from examples.python.utils import distributed_pb2 as examples_dot_python_dot_utils_dot_distributed__pb2


class NodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Run = channel.stream_stream(
                '/examples.python.utils.distributed.NodeService/Run',
                request_serializer=examples_dot_python_dot_utils_dot_distributed__pb2.RunRequest.SerializeToString,
                response_deserializer=examples_dot_python_dot_utils_dot_distributed__pb2.RunResponse.FromString,
                )
        self.RunReturn = channel.stream_stream(
                '/examples.python.utils.distributed.NodeService/RunReturn',
                request_serializer=examples_dot_python_dot_utils_dot_distributed__pb2.RunRequest.SerializeToString,
                response_deserializer=examples_dot_python_dot_utils_dot_distributed__pb2.RunResponse.FromString,
                )


class NodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Run(self, request_iterator, context):
        """run a routine on node's context, save the return values as object refs,
        return the object refs to the caller.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunReturn(self, request_iterator, context):
        """run a routine on node's context, return the object directly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Run': grpc.stream_stream_rpc_method_handler(
                    servicer.Run,
                    request_deserializer=examples_dot_python_dot_utils_dot_distributed__pb2.RunRequest.FromString,
                    response_serializer=examples_dot_python_dot_utils_dot_distributed__pb2.RunResponse.SerializeToString,
            ),
            'RunReturn': grpc.stream_stream_rpc_method_handler(
                    servicer.RunReturn,
                    request_deserializer=examples_dot_python_dot_utils_dot_distributed__pb2.RunRequest.FromString,
                    response_serializer=examples_dot_python_dot_utils_dot_distributed__pb2.RunResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'examples.python.utils.distributed.NodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Run(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/examples.python.utils.distributed.NodeService/Run',
            examples_dot_python_dot_utils_dot_distributed__pb2.RunRequest.SerializeToString,
            examples_dot_python_dot_utils_dot_distributed__pb2.RunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunReturn(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/examples.python.utils.distributed.NodeService/RunReturn',
            examples_dot_python_dot_utils_dot_distributed__pb2.RunRequest.SerializeToString,
            examples_dot_python_dot_utils_dot_distributed__pb2.RunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
