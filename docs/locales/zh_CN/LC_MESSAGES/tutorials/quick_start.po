# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Ant Group Co., Ltd.
# This file is distributed under the same license as the SPU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SPU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 15:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorials/quick_start.ipynb:9
msgid "SPU Quickstart"
msgstr ""

#: ../../tutorials/quick_start.ipynb:12
msgid "Program with JAX"
msgstr ""

#: ../../tutorials/quick_start.ipynb:14
msgid ""
"SPU, as an `XLA <https://www.tensorflow.org/xla>`__ backend, does not "
"provide a high-level programming API by itself, instead, we can use any "
"API that supports the XLA backend to program. In this tutorial, we use "
"`JAX <https://github.com/google/jax>`__ as the programming API and "
"demonstrate how to run a JAX program on SPU."
msgstr ""

#: ../../tutorials/quick_start.ipynb:16
msgid ""
"JAX is an AI framework from Google. Users can write the program in NumPy "
"syntax, and let JAX translate it to GPU/TPU for acceleration, please read"
" the following pages before you start:"
msgstr ""

#: ../../tutorials/quick_start.ipynb:18
msgid ""
"`JAX Quickstart "
"<https://jax.readthedocs.io/en/latest/notebooks/quickstart.html>`__"
msgstr ""

#: ../../tutorials/quick_start.ipynb:19
msgid ""
"`How to Think in JAX "
"<https://jax.readthedocs.io/en/latest/notebooks/thinking_in_jax.html>`__"
msgstr ""

#: ../../tutorials/quick_start.ipynb:20
msgid ""
"`JAX - The Sharp Bits "
"<https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html>`__"
msgstr ""

#: ../../tutorials/quick_start.ipynb:22
msgid "Now we start to write some simple JAX code."
msgstr ""

#: ../../tutorials/quick_start.ipynb:92
msgid ""
"The above code snippet creates two random variables and compares which "
"one is greater. Yes, the code snippet is not interesting yet~"
msgstr ""

#: ../../tutorials/quick_start.ipynb:104
msgid "Program with SPU"
msgstr ""

#: ../../tutorials/quick_start.ipynb:106
msgid "Now, let's convert the above code to an SPU program."
msgstr ""

#: ../../tutorials/quick_start.ipynb:109
msgid "A Quick introduction to device system"
msgstr ""

#: ../../tutorials/quick_start.ipynb:111
msgid ""
"MPC programs are \"designed\" to be used in distributed way. In this "
"tutorial, we use SPU builtin distributed framework for demonstration."
msgstr ""

#: ../../tutorials/quick_start.ipynb:113
msgid ""
"Warn: it's for demonstration purpose only, you should use an industrial "
"framework like SecretFlow in production."
msgstr ""

#: ../../tutorials/quick_start.ipynb:115
msgid "To start the ppd cluster. In a separate terminal, run"
msgstr ""

#: ../../tutorials/quick_start.ipynb:121
msgid ""
"This command starts multi-processes to simulate parties that do not trust"
" each other. Please keep the terminal alive."
msgstr ""

#: ../../tutorials/quick_start.ipynb:227
msgid "``ppd.init`` initialize the SPU device system on the given cluster."
msgstr ""

#: ../../tutorials/quick_start.ipynb:229
msgid ""
"The cluster has three nodes, each node is a process that listens on a "
"given port."
msgstr ""

#: ../../tutorials/quick_start.ipynb:231
msgid "The 3 physical nodes construct 3 virtual devices."
msgstr ""

#: ../../tutorials/quick_start.ipynb:233
msgid ""
"``P1`` and ``P2`` are so called ``PYU Device``, which is just a simple "
"Python device that can run a python program."
msgstr ""

#: ../../tutorials/quick_start.ipynb:234
msgid ""
"``SPU`` is a virtual device hosted by all 3-nodes, which use MPC "
"protocols to compute securely."
msgstr ""

#: ../../tutorials/quick_start.ipynb:236
msgid "Virtually, it looks like below picture."
msgstr ""

#: ../../tutorials/quick_start.ipynb:238
msgid "|alt text|"
msgstr ""

#: ../../tutorials/quick_start.ipynb:245
msgid "alt text"
msgstr ""

#: ../../tutorials/quick_start.ipynb:240
msgid ""
"On the left side, there are three physical nodes, a circle means the node"
" runs a ``PYU Device`` and a triangle means the node runs a ``SPU Device "
"Slice``."
msgstr ""

#: ../../tutorials/quick_start.ipynb:241
msgid ""
"On the right side, its virtual device layout is constructed by the left "
"physical node."
msgstr ""

#: ../../tutorials/quick_start.ipynb:243
msgid "We can also check the detail of ``SPU device``."
msgstr ""

#: ../../tutorials/quick_start.ipynb:308
msgid ""
"The ``SPU`` device uses ``ABY3`` as the its backend protocol and runs on "
"``Ring128`` field."
msgstr ""

#: ../../tutorials/quick_start.ipynb:311
msgid "Move JAX program to SPU"
msgstr ""

#: ../../tutorials/quick_start.ipynb:313
msgid "Now, let's move the JAX program from CPU to SPU."
msgstr ""

#: ../../tutorials/quick_start.ipynb:341
msgid ""
"``ppd.device(\"P1\")(make_rand)`` convert a python function to a "
"``DeviceFunction`` which will be called on ``P1`` device."
msgstr ""

#: ../../tutorials/quick_start.ipynb:343
msgid ""
"The terminal that starts the cluster will print log like this, which "
"means the ``make_rand`` function is relocated to another node and "
"executed there."
msgstr ""

#: ../../tutorials/quick_start.ipynb:359
msgid ""
"The result of ``make_rand`` is also stored on ``P1`` and invisible for "
"other device/node. For example, when printing them, all the above objects"
" are ``DeviceObject``, the plaintext object is invisible."
msgstr ""

#: ../../tutorials/quick_start.ipynb:411
msgid ""
"And finally, we can reveal the result via ``ppd.get``, which will fetch "
"the plaintext from devices to this host(notebook)."
msgstr ""

#: ../../tutorials/quick_start.ipynb:457
msgid ""
"The result shows that the random variable ``x`` from ``P1`` is greater "
"than ``y`` from ``P2``, we can check the result by revealing origin "
"inputs."
msgstr ""

#: ../../tutorials/quick_start.ipynb:505
#, python-format
msgid ""
"With above code, we implements the classic `Yao's millionares' problem "
"<https://en.wikipedia.org/wiki/Yao%27s_Millionaires%27_problem>`__ on "
"SPU. Note:"
msgstr ""

#: ../../tutorials/quick_start.ipynb:507
msgid ""
"SPU re-uses ``jax`` api, and translates it to SPU executable, there is no"
" ``import spu.jax as jax`` stuffs."
msgstr ""

#: ../../tutorials/quick_start.ipynb:508
msgid ""
"SPU hides secure semantic, to compute a function *securely*, just simply "
"mark it on SPU."
msgstr ""

#: ../../tutorials/quick_start.ipynb:520
msgid "Logistic regression"
msgstr ""

#: ../../tutorials/quick_start.ipynb:522
msgid ""
"Now, let's check a more complicated example, privacy-preserving logistic "
"regression."
msgstr ""

#: ../../tutorials/quick_start.ipynb:524
msgid "First, write the raw JAX program."
msgstr ""

#: ../../tutorials/quick_start.ipynb:593
msgid "Run the program on CPU, the result (AUC) works as expected."
msgstr ""

#: ../../tutorials/quick_start.ipynb:641
msgid "Now, use ``ppd.device`` to make the above code run on SPU."
msgstr ""

#: ../../tutorials/quick_start.ipynb:669
msgid ""
"``P1`` loads the features(X) only, ``P2`` loads the labels(Y) only, and "
"for convenience, P1/P2 uses the same dataset, but only loads partial "
"(either feature or label). Now ``P1 and P2`` want to train the model "
"without telling each other the privacy data, so they use SPU to run the "
"``train`` function."
msgstr ""

#: ../../tutorials/quick_start.ipynb:671
msgid ""
"It takes a little while to run the above program since privacy preserving"
" program runs much slower than plaintext version."
msgstr ""

#: ../../tutorials/quick_start.ipynb:673
msgid ""
"The parameters W and bias B are also located at SPU (no one knows the "
"result). Finally, let's reveal the parameters to check correctness."
msgstr ""

#: ../../tutorials/quick_start.ipynb:721
msgid ""
"For this simple dataset, AUC metric shows exactly the same, but since SPU"
" uses fixed point arithmetic, which is not as accurate as IEEE floating "
"point arithmetic, the trained parameters are not exactly the same."
msgstr ""

#: ../../tutorials/quick_start.ipynb:843
msgid "Visibility inference"
msgstr ""

#: ../../tutorials/quick_start.ipynb:845
msgid ""
"SPU compiler/runtime pipeline works together to protect privacy "
"information."
msgstr ""

#: ../../tutorials/quick_start.ipynb:847
msgid ""
"When an object is transferred from PYU to SPU device, the data is first "
"encrypted (secret shared) and then sent to SPU hosts."
msgstr ""

#: ../../tutorials/quick_start.ipynb:849
msgid ""
"The SPU compiler deduces the visibility of the entire program, including "
"all nodes in the compute DAG, from the input's visibility with a very "
"simple rule: for each SPU instruction, when any input is a secret, the "
"output is a secret. In this way, the ``secure semantic`` is propagated "
"through the entire DAG."
msgstr ""

#: ../../tutorials/quick_start.ipynb:851
msgid "For example,"
msgstr ""

#: ../../tutorials/quick_start.ipynb:901
msgid ""
"It shows that ``ppd.device`` decorated ``sigmoid`` is a "
"``DeviceFunction`` which could be launched by SPU."
msgstr ""

#: ../../tutorials/quick_start.ipynb:903
msgid "We can print the SPU bytecode via"
msgstr ""

#: ../../tutorials/quick_start.ipynb:990
msgid "It shows that the function type signature is:"
msgstr ""

#: ../../tutorials/quick_start.ipynb:996
msgid ""
"Note, since the input is random from the driver (this notebook), which is"
" not privacy information by default, so the input is ``tensor<3x3xf32>``,"
" which means it accepts a ``3x3 public f32 tensor``."
msgstr ""

#: ../../tutorials/quick_start.ipynb:998
msgid ""
"The compiler deduces the whole program's visibility type, and finds "
"output should be ``tensor<3x3xf32>``, which means a ``3x3 public f32 "
"tensor``."
msgstr ""

#: ../../tutorials/quick_start.ipynb:1000
msgid "Now let's generate input from ``P1`` and run the program again."
msgstr ""

#: ../../tutorials/quick_start.ipynb:1095
msgid ""
"Since the input comes from ``P1``, which is private, so the function "
"signature becomes:"
msgstr ""

#: ../../tutorials/quick_start.ipynb:1101
msgid ""
"This means accepts ``1 secret i32`` data and outputs ``1 secret f32`` "
"data, inside the compiled function, all internal instruction's visibility"
" type is also correctly deduced."
msgstr ""

#: ../../tutorials/quick_start.ipynb:1103
msgid ""
"With the JIT(just in time) type deduction, SPU protects the clients' "
"privacy."
msgstr ""

