# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Ant Group Co., Ltd.
# This file is distributed under the same license as the SPU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SPU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 15:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9
msgid "Develop Your First MPC-Application"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:20
msgid ""
"The following codes are demos only. Itâ€™s NOT for production due to system"
" security concerns, please DO NOT use it directly in production."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:31
msgid "This is an introductory secretflow tutorial that contains:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:33
msgid "Implement a simple algorithm and run it in plaintext as baseline."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:34
msgid "Use simulator to check the **precision loss** and try to fix it."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:35
msgid ""
"Run elaborated emulations to give reports on both **efficiency and "
"correctness**."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:37
msgid ""
"We **highly recommend** the reader to read `spu-quickstart "
"<../tutorials/quick_start.ipynb>`__ before continuing read this tutorial,"
" which you can learn some basic usage of Device, DeviceObject and how to "
"run program in secret."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:49
msgid "Part 0: Prepare the environment and dataset"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:51
msgid ""
"Environment: To run this tutorial, you should have spu installed in your "
"environment(if not, you can refer to `this "
"<https://www.secretflow.org.cn/docs/spu/en/getting_started/install.html>`__)."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:52
msgid ""
"Dataset: We use the breast cancer wisconsin dataset, which can be "
"obtained from sklearn. And we just do simple minmax transform for "
"preprocessing"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:409
msgid "Part 1: Implement algorithm in plaintext"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:411
msgid ""
"`SGD <https://en.wikipedia.org/wiki/Stochastic_gradient_descent>`__\\ "
"(Stochastic Gradient Descent) is a simple but effective optimization "
"algorithm, so in MPC settings, it's common to use it to optimize the "
"model."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:413
msgid ""
"`LR <https://en.wikipedia.org/wiki/Logistic_regression>`__\\ (Logistic "
"Regression) is a widely used linear model especially in financial "
"industry. So in this tutorial, as an example, we will implement LR with a"
" modified SGD, called `policy-sgd "
"<../development/policy_sgd_insight.rst>`__, which can accelerate the "
"speeds of training in most scenery."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:424
msgid "Here, we just list some important equations used in policy-sgd:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:426
msgid "LR compute gradient with(``n`` is batch_size):"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:428
#: ../../tutorials/develop_your_first_mpc_application.ipynb:2420
#, python-brace-format
msgid ""
"grad = \\frac{1}{n} \\sum_{i} (sigmoid(w^T x_i) - y_i) x_i\n"
"\n"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:429
msgid "Policy-sgd compute dk in first epoch with(``p`` is number of features):"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:431
msgid ""
"d_k = \\frac{1}{\\sqrt{\\sum_j^{p} grad_j^2} + \\epsilon}\n"
"\n"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:432
msgid "Then, update weights with(``i`` means i-th epoch, ``k`` means k-th iter):"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:434
#, python-brace-format
msgid ""
"w_{i,k} = w_{i, k-1} -  d_k * \\alpha *  grad\n"
"\n"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:445
msgid ""
"In this part, we first forget the MPC setting(data split, protocol...) "
"and implement the algorithm in plaintext. Secretflow recommends user to "
"do this with `Jax <https://jax.readthedocs.io/en/latest/>`__, which "
"``jax.numpy`` provides a familiar NumPy-style API for ease of adoption. "
"If you are familiar with Numpy, you can go through `this blog "
"<https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html>`__"
" and gets some caveats and then write jax-code just like numpy-code."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:472
msgid ""
"The original response function for LR is sigmoid function, which contains"
" time-consuming ops like exp and division in MPC. So it's common to "
"approximate sigmoid function with other MPC-friendly function. Here we "
"give two method, i.e. first-order Taylor and square root approximation."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:522
msgid "policy-sgd needs scale learning rate in first epoch."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:550
msgid ""
"Then, we give a brief implementation of LR with policy-sgd, and have "
"similar interface(but less) with sklearn."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:552
msgid ""
"**Note**: for simplicity, we will always fit intercept in LR model and "
"omit regularization and other techniques. For full version of SSLR, can "
"refer to ``SSRegression`` in secretflow."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:712
msgid "Now, let's try this algorithm in plaintext!"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:770
msgid "Things seem go well, try to predict the dataset and compute auc."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:829
msgid "Part 2: Run algorithm with simulator"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:831
msgid ""
"Normally, you can just do something like `LR with spu "
"<https://www.secretflow.org.cn/docs/secretflow/en/tutorial/lr_with_spu.html>`__"
" to run your program within a secure context: move you dataset to PYU or "
"SPU, run program with SPU you declare and reveal some information you "
"need(``reveal`` is a **very dangerous** op, and you should use it very "
"carefully in real application)."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:833
msgid ""
"However, we will see later that you may come across large **metric "
"gap**\\ (like auc in LR) between plaintext and secret. It will be a "
"better choice that developer can run MPC program simpler with high "
"flexibility to adjust hyper-parameters like the size of ring, fxp or "
"underlying MPC protocol etc."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:835
msgid ""
"So in this part, we will show how to use simulator to run our algorithm "
"just like running normal MPC program, and do minimum experiments to focus"
" and verify the pitfall of the program. To use simulator but not running "
"program with SPU Device directly has two advantages:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:837
msgid ""
"**Fewer Code**: No need to deal with tons of ``DeviceObject`` and move "
"data from PYU between SPU."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:838
msgid ""
"**Quicker Experiment**: No ray cluster connected, run experiments end-to-"
"end."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:861
msgid ""
"Here, to simulate , we first define a simple simulator with CHEETAH "
"protocol and 64 bits ring in 2pc settings. We will talk about 3pc later."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:2284
msgid "Then, we try it in 3pc setting, i.e. use ABY3 protocol."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:2387
msgid ""
"When the program runs in secret without any modification, the auc may "
"drop dramatically after training 3 epochs(from 0.990 to 0.490 for "
"cheetah)!"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:2389
msgid ""
"We will give some analysis and try to fix it first from application "
"perspective and think deeper in MPC perspective."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:2401
msgid "Application Perspective"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:2403
msgid ""
"Before we dive into this question, we can first summarize the differences"
" of policy-sgd between naive-sgd are:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:2405
msgid "Using approximation function to compute sigmoid(default is t1)."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:2407
msgid ""
"The scale of learning rate, which contains the computation of dk as "
"defined in ``compute_dk_func``."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:2418
msgid ""
"Doing some simple math, we can notice that t1 approximation will force "
"the pred to 0 when inner product is less than -2 and to 1 when inner "
"product is large than 2. So when we compute gradient with:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:2422
msgid ""
"If coincidentally, we can get all elements of grad very near to 0(may "
"have little error in MPC), then the ``dk`` computed in first epoch "
"becomes very large, and may result in the failure of training. We can "
"verify this by simply enlarge the ``batch_size`` to 64 which can decrease"
" the probability of all-zero problem."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:2673
msgid ""
"Restricting large batch_size is not an appropriate way, the key is to "
"make the scale factor smaller, we can also fix the question by enlarging "
"the ``eps``, e.g. change ``eps`` from 1e-6 to 1e-2."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:2675
msgid ""
"**Note**: ``eps`` in policy-sgd indeed has two affects, one is to prevent"
" the zero-division error, the other is to restrict the maximum scale "
"factor in warm-start phase(first epoch)."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:4056
msgid ""
"The above analyses are based on t1 sigmoid, which leads to 0 in grad. So "
"we can switch the t1 approximation to other non-truncate but costly "
"form(e.g. sr approximation)."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5437
msgid ""
"So, if we just consider it on app layer, we can get three rules for "
"fixing:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5439
msgid "enlarge ``batch_size``."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5441
msgid "enlarge ``eps``."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5443
msgid "use non-truncate sigmoid approximation(e.g. sr approximation)."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5455
msgid "MPC Perspective"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5457
msgid ""
"In this part, we concentrate more on why huge error occurs. To achieve "
"this goal, we will talk according to underlying protocol and use "
"simulator to do some **experiments** to confirm our hypothesis. Readers "
"can do the similar things when you develop your own secure application."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5459
msgid ""
"Before diving into the problem deeper, we highly recommend the reader to "
"read:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5461
msgid ""
"`spu_inside <https://www.secretflow.org.cn/docs/spu/latest/en-"
"US/tutorials/spu_inside#Tracing>`__: gives some introductions how spu "
"works inside for float-point operations."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5463
msgid ""
"`pitfall <https://www.secretflow.org.cn/docs/spu/latest/en-"
"US/development/fxp>`__: spu implements math function(like ``reciprocal``,"
" ``log`` and so on) with approximation algorithm, so some precision issue"
" will occur when inputs fall into some intervals. We list some known "
"issue about this."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5465
msgid ""
"`protocols <https://www.secretflow.org.cn/docs/spu/latest/en-"
"US/reference/mpc_status>`__: list all protocols spu implements now. "
"Generally speaking, for 2pc, it's safe to use cheetah, while for 3pc, "
"ABY3 is the only choice."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5467
msgid "First define a function just like ``fit_and_predict`` to get dk_arr."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5508
msgid "2PC: Cheetah Protocol"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5510
msgid "Recap:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5512
msgid ""
"`cheetah <https://eprint.iacr.org/2022/207>`__ is a fast 2pc semi-honest "
"protocol which uses FHE to accelerate the computation. But it will have "
"0-2 bits error when do ``mul`` or ``dot``."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5514
msgid ""
"If 64-bits ring, about 18 bitwidth fixed-point number will be used. So "
"the minimum positive float spu can represent is "
":math:`\\frac{1}{2^{18}}`."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:5525
msgid "We first check the output of dk_arr and try to find the caveat."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:6005
msgid ""
"Surprisingly, we get a very **small negative number** which makes that "
"weight update wrong!(the opposite direction and large scale factor for "
"sgd)"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:6051
msgid "However, if we use a bigger ring, then everything is ok."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:7947
msgid ""
"From the above outputs, we can guess if input is near "
":math:`\\frac{1}{2^{18}}` and use cheetah protocol, when doing ``square``"
" and ``sum``, the bit error may be significant and not negligible(``mul``"
" and ``dot`` have 0-2 bit errors)."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8109
msgid ""
"So if ``eps=1e-6``, the two norm of grad may be a negative number when "
"each element of grad is near to :math:`\\frac{1}{2^{18}}`, then we get a "
"very small negative dk."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8111
msgid "This explains the claims we get from app layer:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8113
msgid ""
"Enlarging ``batch_size``: the probability of all elements of grad is zero"
" becomes small."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8115
msgid "Enlarging ``eps``: force the denominator to be positive number."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8127
msgid "3PC: ABY3 Protocol"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8129
msgid "We still check the dk_arr first."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8150
msgid "emmmmmm, strange value occurs again, we find **0** in dk_arr!"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8196
msgid ""
"Comparing with small negative number, 0 is a mild error for our update "
"procedure. It just does nothing in that iter, so the final auc may drop a"
" little(from 0.99 to 0.97, users can test yourself that if you set eps to"
" 1e-2, then the result will be very stable)."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8207
msgid "Likewise, We always check the computation of 2-norm."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8290
msgid "Then, check the reciprocal op."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8349
msgid "Something More"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8351
msgid ""
"Indeed, there are some other interesting things in SSLR. Here, due to "
"length limitations, we just give some hints, and readers can do more "
"simulations yourself!"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8363
msgid "Rsqrt v.s. Norm"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8365
msgid ""
"We can recall that the ``compute_dk_func`` function defined in Part 1 "
"contains a ``method`` arg, and we just ignore this arg before. Indeed, we"
" can tell simulator to print more information like `spu_inside "
"<https://www.secretflow.org.cn/docs/spu/latest/en-"
"US/tutorials/spu_inside#Tracing>`__ do: enable **hlo**\\ (High Level "
"Operations) trace and profile on. Then we can figure out which op has "
"been invoked and its time cost."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8367
msgid ""
"Here, we list some advantages of using ``jax.lax.rsqrt`` rather than "
"``jnp.linalg.norm``:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8369
msgid ""
"Fewer bytes and few send actions: which leads to smaller running time(See"
" the following comments and notes for details)."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8371
msgid ""
"More stable when given same ``eps``: if we regard ``f(x)`` as "
"``compute_dk_func`` with ``method=norm``, and ``g(x)`` with "
"``method=rsqrt``, then the users can do simulation yourself, and find "
"``f(x)`` has higher relative error than ``g(x)``."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:8625
msgid "If directly invoking rsqrt, you can find send actions have obvious drop!"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9075
msgid ""
"When using aby3, you can find both the send actions and send bytes drop "
"large if using rsqrt!"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9297
msgid "Computing Loss"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9299
msgid ""
"Many ML frameworks will show validation loss during training procedure "
"when using a validation dataset. It's straight to compute the loss in LR "
"as follows:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9301
#, python-brace-format
msgid ""
"loss = -\\frac{1}{N} \\sum_{i=1}^N [y_i log(p_i) + (1-y_i) log(1-p_i)] "
"\\quad  (1)\n"
"\n"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9303
msgid ""
"But when you use t1 approximation for sigmoid, then you may come across "
":math:`log(0)` problem. Here, we list two potential recipes to alleviate "
"it."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9305
msgid ""
"**Costly but accurate**: we plug in :math:`p_i = "
"\\frac{1}{1+e^{-w^Tx_i}}` to (1), then we can get:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9307
#, python-brace-format
msgid ""
"loss = -\\frac{1}{N} \\sum_{i=1}^N [y_i w^Tx_i - log(1+e^{w^Tx_i})] "
"\\quad  (2)\n"
"\n"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9309
#, python-brace-format
msgid ""
"this formula solve the :math:`log(0)` problem, but if :math:`w^Tx_i` gets"
" too large, as we already know in `pitfall "
"<https://www.secretflow.org.cn/docs/spu/en/reference/fxp.html>`__, this "
"gets **huge errors**! To get stable and accurate formula to compute loss,"
" we notice :math:`log(1+e^{w^T x_i})` is well-known *Softplus* function, "
"so we can use the equation of Softplus: :math:`log(1+e^{x}) = log(1 + "
"e^{-|x|}) + max(0, x)`, then we can get:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9311
#, python-brace-format
msgid ""
"loss = -\\frac{1}{N} \\sum_{i=1}^N [y_i w^Tx_i - log(1+e^{-|w^Tx_i|}) - "
"max(w^T x_i, 0)] \\quad (3)\n"
"\n"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9313
msgid ""
"**Cheap but approximate** :Equation (3) can give accurate result, but it "
"contains time-consuming ops(:math:`log`, :math:`exp`), which cost a lot! "
"If you just want to compute an approximation of loss(e.g. maybe you want "
"to do early stop with loss), you can try Taylor expansion, which gives:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9315
#, python-brace-format
msgid ""
"loss = \\frac{1}{N} \\sum_{i=1}^N [log(2) - (y-0.5)w^T x_i + 0.125 * (w^T"
" x_i)^2]\n"
"\n"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9327
msgid "Part 3: Run elaborated emulations"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9329
msgid ""
"Emulations is an **experimental** feature for now, and is under rapid "
"development, so we do not package the code of sml into spu. Users can try"
" this feature from **source code** and run with bazel .Till now, we only "
"have support for LAN setting(``MULTIPROCESS`` mode). ``Docker`` mode, "
"which runs program like under WAN setting, will be posted in future "
"version."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9331
msgid ""
"Finally, we talk about how to do emulations. Comparing to simulator, "
"emulator runs with a simple scheduler like Secretflow does, and offers "
"some facility(e.g. generate mock data) to make benchmark simpler. So spu "
"provides an ``Emulator`` class and gives an easy-to-use interface."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9342
msgid ""
"Usually, the emulation will be done with larger dataset, so we won't run "
"directly in this tutorial notebook. Instead, we will show a big picture "
"on how to design and run emulations for MPC application step by step."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9354
msgid "Setup: define running function"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9356
msgid ""
"Just like what we do in secretflow, we should first define a python "
"function, which will be run in spu. Here, as an example, we just define a"
" very simple function that accepts data from two parties and return the "
"predicted probability after the model trained(you can also split data "
"into training & validation parts, and return the probs of validation "
"dataset.)."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9358
msgid ""
"Taking ``SSLRSGDClassifier`` as an example, we mainly want to argue that "
"policy-sgd is better than naive-sgd in MPC setting, so we can design the "
"following experiments:"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9360
msgid ""
"Find best ``dk_method`` and ``eps`` for policy-sgd: for all datasets, "
"compare the accuracy and efficiency."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9362
msgid ""
"Compare the accuracy and efficiency when switching ``sig_type`` for both "
"policy-sgd and naive-sgd."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9364
msgid ""
"To compare policy-sgd and naive-sgd, we fix ``epochs`` and test the "
"influence of ``learning_rate`` and ``batch_size``."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9420
msgid "Define running config"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9422
msgid ""
"After designing all the experiments, we can prepare our running config. "
"Currently, we only support ``MULTIPROCESS`` mode, which uses multiprocess"
" to emulate multi-party and just like running in LAN(``DOCKER`` mode "
"which can set ``bandwidth`` and ``latency`` to simulate the different WAN"
" settings will be supported in future version)."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9424
msgid ""
"For now, our goal is to compare the accuracy/efficiency diff when "
"switching hyper-param, running program in LAN can be a good choice. "
"Besides, in order to simulate diverse node deployment ways, users can "
"flexibly configure the number of nodes and device situations yourself. "
"You can get some examples of config in ``examples/python/conf/``."
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9888
msgid "Put them together"
msgstr ""

#: ../../tutorials/develop_your_first_mpc_application.ipynb:9890
msgid "Now we put all these together, we can get a simple paradigm of emulation."
msgstr ""

