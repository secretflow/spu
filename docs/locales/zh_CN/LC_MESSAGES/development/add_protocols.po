# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Ant Group Co., Ltd.
# This file is distributed under the same license as the SPU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SPU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 15:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../development/add_protocols.rst:2
msgid "Adding New MPC Protocols"
msgstr ""

#: ../../development/add_protocols.rst:5
msgid ""
"SecretFlow SPU currently is under active development and the APIs "
"provided to protocol developers may be unstable at this moment."
msgstr ""

#: ../../development/add_protocols.rst:8
msgid "Introduction"
msgstr ""

#: ../../development/add_protocols.rst:9
msgid ""
"This document is mainly for developers who want to add custom MPC "
"protocols in SPU. Before reading this document, we recommend that "
"developers have a basic understanding of the SPU system architecture "
"(i.e., :ref:`/development/compiler.rst`, "
":ref:`/development/type_system.rst` and :ref:`/development/runtime.rst`) "
"and the `layout "
"<https://github.com/secretflow/spu/blob/main/REPO_LAYOUT.md>`_ of the SPU"
" code repository. In short, SPU translates the high-level applications "
"(such as machine learning model training) written in JAX to an MPC-"
"specific intermediate representation named PPHLO and then dispatches "
"PPHLO operations to the low-level MPC protocols. In theory, protocol "
"developers only need to implement a basic set of MPC operation APIs to "
"fully use the SPU infrastructure to run machine learning or data analysis"
" programs. That is to say, for most MPC protocol development, it only "
"needs to add some source code files into the libspu/mpc folder. At "
"present, SPU has integrated several protocols such as ABY3 and Cheetah, "
"which can be regarded as a guide for protocol implementation."
msgstr ""

#: ../../development/add_protocols.rst:22
msgid "A walk-through guide"
msgstr ""

#: ../../development/add_protocols.rst:23
msgid ""
"We further illustrate the procedures of adding protocols step by step in "
"a **top-down** manner."
msgstr ""

#: ../../development/add_protocols.rst:26
msgid "Add a new protocol kind"
msgstr ""

#: ../../development/add_protocols.rst:27
msgid ""
"When users launch the SPU backend runtime, they will specify the running "
"MPC protocol kind through the runtime config. The protocol kinds "
"supported by SPU are enumerations defined in `spu.proto "
"<https://github.com/secretflow/spu/blob/main/libspu/spu.proto>`_. Thus, "
"developers must add their protocol kinds in this protobuf file to enable "
"SPU to be aware of the new protocols."
msgstr ""

#: ../../development/add_protocols.rst:33
msgid "ProtocolKind enumerations"
msgstr ""

#: ../../development/add_protocols.rst:49
msgid "Register protocol"
msgstr ""

#: ../../development/add_protocols.rst:50
msgid ""
"Each MPC protocol execution environment is abstracted as a C++ instance "
"of an `Object "
"<https://github.com/secretflow/spu/blob/main/libspu/core/object.h>`_ "
"class in SPU. SPU constructs an MPC object when creating an "
"**SPUContext**. Then, SPU registers a concrete protocol implementation "
"through a factory function named `RegisterProtocol "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/factory.cc>`_ "
"according to the runtime config. Therefore, protocol developers need to "
"add their functions in **RegisterProtocol** to implement protocols."
msgstr ""

#: ../../development/add_protocols.rst:55
msgid "RegisterProtocol function"
msgstr ""

#: ../../development/add_protocols.rst:77
msgid "Implement protocol IO interface"
msgstr ""

#: ../../development/add_protocols.rst:78
msgid ""
"Another function called by the factory class is the **CreateIO** "
"function. As different protocols use different secret sharing schemas, "
"which means SPU has to use different ways to input/output secret data "
"from plaintext data. As a results, developers have to implement these "
"protocol-specific APIs defined in `io_interface.h "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/io_interface.h>`_."
" Developers can check the `ABY3 implementation "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/aby3/io.cc>`_ as "
"a reference."
msgstr ""

#: ../../development/add_protocols.rst:84
msgid "Understand protocol object"
msgstr ""

#: ../../development/add_protocols.rst:85
msgid ""
"SPU protocol `Object "
"<https://github.com/secretflow/spu/blob/main/libspu/core/object.h>`_ may "
"be the key concept for adding new protocols. Let's take a closer look at "
"its design. The goal of **Object** class is to realize the generalization"
" and flexibility of developing MPC protocols through dynamic binding. An "
"Object instance has a series of kernels and states. A kernel and a state "
"can be regarded as a member function and a member variable of an Object, "
"respectively."
msgstr ""

#: ../../development/add_protocols.rst:91
msgid "SPU protocol Object class"
msgstr ""

#: ../../development/add_protocols.rst:127
msgid "Construct protocol object"
msgstr ""

#: ../../development/add_protocols.rst:128
msgid ""
"We take the ABY3 implementation as a specific example to further explain "
"the description above."
msgstr ""

#: ../../development/add_protocols.rst:130
msgid ""
"First of all, we can see that there is an independent aby3 directory "
"under the `libspu/mpc "
"<https://github.com/secretflow/spu/tree/main/libspu/mpc>`_ directory in "
"SPU's repository layout. The aby3 directory includes the C++ source files"
" and header files required by the ABY3 protocol implementation. These "
"files may be confusing at first glance. The key to know its code "
"organization is to open the `protocol "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/aby3/protocol.cc>`_"
" file, which defines the **regAby3Protocol** function for registering "
"kernels and states. This function will be called by the factory class "
"described in previous step."
msgstr ""

#: ../../development/add_protocols.rst:137
msgid "ABY3 protocol registration"
msgstr ""

#: ../../development/add_protocols.rst:164
msgid "Inside the **regAby3Protocol** function, it does three things."
msgstr ""

#: ../../development/add_protocols.rst:166
msgid ""
"The first is to register the protocol types. These types are defined in "
"the `type.h "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/aby3/type.h>`_ "
"header file, \\ representing an arithmetic secret share and a boolean "
"secret share, respectively."
msgstr ""

#: ../../development/add_protocols.rst:169
msgid ""
"The second is to register protocol states (variables), specifically "
"including the three states of Z2kState, \\ Communicator, and PrgState, "
"which are used to store the ring information, communication facilities, "
"and \\ pseudorandom number generator for protocol implementation."
msgstr ""

#: ../../development/add_protocols.rst:173
msgid ""
"The third is to register the protocol kernels (functions). We can see "
"that two types of kernels are registered. \\ The first type is the common"
" kernels implemented in the `pv2k.cc "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/common/pv2k.cc>`_"
" \\ file. The second type is implemented in `arithmetic.cc "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/aby3/arithmetic.cc>`_,"
" \\ `boolean.cc "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/aby3/boolean.cc>`_"
" and other files under the aby3 directory."
msgstr ""

#: ../../development/add_protocols.rst:179
msgid "Implement protocol kernels"
msgstr ""

#: ../../development/add_protocols.rst:180
msgid ""
"In this section, we further explain why the ABY3 developer registers "
"these two types of kernels. In SPU, the interfaces between MPC and HAL "
"layers are defined in the `api.h "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/api.h>`_ file, "
"which consists of a set of operations with public or secret operands "
"(referred as **basic APIs** for the rest of this document). As long as a "
"protocol developer implements basic APIs, he/she can use the SPU full-"
"stack infrastructure to run high-level applications, e.g., training "
"complex neural network models."
msgstr ""

#: ../../development/add_protocols.rst:186
msgid "Some SPU MPC basic APIs"
msgstr ""

#: ../../development/add_protocols.rst:198
msgid ""
"Among the basic APIs, some protocols working on Rings share the same "
"logic on some operations processing public operands, so SPU developers "
"pre-implement these APIs as kernels and place them in the common "
"directory. As a result, the ABY3 developer can directly register these "
"kernels through the **regPV2kKernels** function."
msgstr ""

#: ../../development/add_protocols.rst:202
msgid "Pre-implemented *and_pp* kernel"
msgstr ""

#: ../../development/add_protocols.rst:224
msgid "Register *and_pp* kernel in regPV2kKernels function"
msgstr ""

#: ../../development/add_protocols.rst:235
msgid ""
"Besides, ABY3 protocol-specific operations need to be implemented by "
"developers as kernels to register. For example, the multiplication of two"
" arithmetic secret shares of ABY3 is implemented as the **MulAA** kernel "
"located in the `arithmetic.cc "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/aby3/arithmetic.cc>`_"
" source file. When kernels are implemented and registered, a new protocol"
" is finally added."
msgstr ""

#: ../../development/add_protocols.rst:240
msgid "ABY3 *mul_aa* kernel for arithmetic share multiplication"
msgstr ""

#: ../../development/add_protocols.rst:258
msgid "Testing"
msgstr ""

#: ../../development/add_protocols.rst:259
msgid ""
"After a protocol is added, the developer usually wants to test whether "
"the protocol works as expected. There are two ways to test the protocol "
"functionality in SPU. The first way is to run python examples. SPU has "
"provided users with a series of application `examples "
"<https://github.com/secretflow/spu/tree/main/examples/python>`_. If a "
"protocol fully implements SPU's basic APIs, the developer can run these "
"high-level examples to verify whether the low-level protocol development "
"is correct."
msgstr ""

#: ../../development/add_protocols.rst:265
msgid ""
"The second way is to write and run unittest. Some protocols do not cover "
"all the basic APIs and cannot run examples, or developers only want to "
"test the functionalities of some specific MPC operations (such as "
"addition and multiplication). In these cases it is more practical to run "
"unittest. SPU developers have construct a general test frameworks in "
"`api_test.cc "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/api_test.cc>`_ "
"and `ab_api_test.cc "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/ab_api_test.cc>`_."
" Developers of new protocols need to instantiate these frameworks to test"
" their own protocol functionalities. Developers can refer to the "
"`protocol_test.cc "
"<https://github.com/secretflow/spu/blob/main/libspu/mpc/aby3/protocol_test.cc>`_"
" file in the aby3 directory to learn how to write their own protocol test"
" files."
msgstr ""

