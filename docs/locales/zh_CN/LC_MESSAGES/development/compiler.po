# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Ant Group Co., Ltd.
# This file is distributed under the same license as the SPU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SPU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 15:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../development/compiler.rst:2
msgid "SPU Compiler"
msgstr ""

#: ../../development/compiler.rst:4
msgid ""
"The SPU compiler aims to provide first-party compiler support from the "
"different ML frameworks to SPU runtime."
msgstr ""

#: ../../development/compiler.rst:7
msgid ""
"`MLIR <https://mlir.llvm.org/>`_ The MLIR project is a novel approach to "
"building reusable and extensible compiler infrastructure. MLIR aims to "
"address software fragmentation, improve compilation for heterogeneous "
"hardware, significantly reduce the cost of building domain specific "
"compilers, and aid in connecting existing compilers together."
msgstr ""

#: ../../development/compiler.rst:9
msgid ""
"`XLA <https://www.tensorflow.org/xla/architecture>`_ Multiple Vendors use"
" XLA as the middle layer, mapping from platform frameworks like PyTorch, "
"JAX, and TensorFlow into XLA and then progressively lowering down to "
"their target hardware."
msgstr ""

#: ../../development/compiler.rst:11
msgid ""
"`MLIR-HLO <https://github.com/tensorflow/mlir-hlo>`_ MLIR-HLO project "
"connects XLA into MLIR world."
msgstr ""

#: ../../development/compiler.rst:13
msgid ""
"Having canonical lowerings from different frontend frameworks to the MLIR"
" ecosystem would provide much needed relief to hardware vendors to focus "
"on their unique value rather than implementing yet another frontend for "
"SPU. For current hardware vendors, they just need to add LLVM target "
"support instead of implementing separate Clang/C++ frontends. MLIR-HLO is"
" achieving similar goal."
msgstr ""

#: ../../development/compiler.rst:17
msgid "All the roads from ML frameworks to SPU"
msgstr ""

