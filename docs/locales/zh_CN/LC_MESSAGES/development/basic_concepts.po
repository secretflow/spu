# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Ant Group Co., Ltd.
# This file is distributed under the same license as the SPU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SPU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 15:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../development/basic_concepts.rst:2
msgid "Basic concepts"
msgstr ""

#: ../../development/basic_concepts.rst:4
msgid ""
"SPU has quite a different programming model than CPU/GPU, this guide "
"introduces the basic concepts."
msgstr ""

#: ../../development/basic_concepts.rst:7
msgid "Machine model"
msgstr ""

#: ../../development/basic_concepts.rst:9
msgid ""
"In normal CPU model, we could treat the machine as an *arithmetic "
"blackbox*, which accepts user's *code* and *data*, runs the computation, "
"and returns result *data* to user. If we draw a picture to show the "
"relationship between user and machine, it's something like this."
msgstr ""

#: ../../development/basic_concepts.rst:13
msgid "user and CPU"
msgstr ""

#: ../../development/basic_concepts.rst:16
msgid ""
"In SPU, the first notable difference is that, *input* is not provided by "
"a single user, it's from **multiple parties**, and the *code* could be "
"provided by a separate party, finally, the output could be received by "
"another party. So **SPU is born to be used in a distributed context**. It"
" looks like:"
msgstr ""

#: ../../development/basic_concepts.rst:20
msgid "multi-user and SPU"
msgstr ""

#: ../../development/basic_concepts.rst:23
msgid ""
"If we take a closer look, SPU itself is not a physical machine, it is "
"hosted by multiple parties that don't trust on each other. For example, "
"in the following picture, we have three parties (red, blue and green) "
"that work together with some MPC protocols, and provide computation "
"service as a **virtual machine**."
msgstr ""

#: ../../development/basic_concepts.rst:27
msgid "inside SPU"
msgstr ""

#: ../../development/basic_concepts.rst:30
msgid ""
"So we have treated SPU as a (multi-party visualized) **secure arithmetic "
"blackbox**, which can evaluate computations securely."
msgstr ""

#: ../../development/basic_concepts.rst:33
msgid "Programming model"
msgstr ""

#: ../../development/basic_concepts.rst:35
msgid "With the above VM model, the next question is **how to program on it**?"
msgstr ""

#: ../../development/basic_concepts.rst:37
msgid ""
"Inside SPU, each physical node behaves differently for the same progress,"
" i.e. some nodes act as senders, while others act as receivers."
msgstr ""

#: ../../development/basic_concepts.rst:39
msgid ""
"But from the users' (of SPU) perspective, SPU behaves as one single VM. "
"One important responsibility of SPU compiler/runtime pipeline is to "
"translate **homogeneous** program to another for **heterogeneous** "
"runtime engines."
msgstr ""

#: ../../development/basic_concepts.rst:41
msgid ""
"For example, in the following computation graph, given `x`, `y`, we want "
"to compute `f(x, y)`, and the big circle represent a compute node which "
"can evaluate f."
msgstr ""

#: ../../development/basic_concepts.rst:45
msgid ""
"In SPU, a group of nodes work together to provide functionality of `f`, "
"as shown blow."
msgstr ""

#: ../../development/basic_concepts.rst:49
msgid "With the above abstraction, SPU can:"
msgstr ""

#: ../../development/basic_concepts.rst:51
msgid "Hide the underline protocols, *write once, run on all protocols*."
msgstr ""

#: ../../development/basic_concepts.rst:52
msgid ""
"Hide the number of parties, *write once, run for a variable number of "
"parties*."
msgstr ""

#: ../../development/basic_concepts.rst:56
msgid "API level"
msgstr ""

#: ../../development/basic_concepts.rst:58
msgid ""
"With the above programming model, the next question is **which language "
"is supported**? SPU provides multi-level API, from upper to lower:"
msgstr ""

#: ../../development/basic_concepts.rst:60
msgid ""
"**Frontend API** (like TensorFlow/JAX), SPU compiles them into SPU IR "
"before running."
msgstr ""

#: ../../development/basic_concepts.rst:61
msgid ""
"**SPU IR**, an Intermediate Representation format defined by SPU, which "
"is not quite readable but easier for computers to understand."
msgstr ""

#: ../../development/basic_concepts.rst:62
msgid "**C++ API**, which could directly access the underline MPC protocols."
msgstr ""

#: ../../development/basic_concepts.rst:64
msgid "The API hierarchy looks like:"
msgstr ""

#: ../../development/basic_concepts.rst:69
msgid "SPU API hierarchy"
msgstr ""

#: ../../development/basic_concepts.rst:72
msgid ""
"An important goal of SPU is to allow people to write secure programs with"
" their familiar frameworks they are familiar with, so it's recommended to"
" use Frontend API."
msgstr ""

#: ../../development/basic_concepts.rst:74
msgid ""
"Currently, only JAX frontend is supported for now. Please check :doc:`JAX"
" on SPU <../tutorials/quick_start>`."
msgstr ""

