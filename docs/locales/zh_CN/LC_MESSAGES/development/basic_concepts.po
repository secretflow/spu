# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Ant Group Co., Ltd.
# This file is distributed under the same license as the SPU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SPU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 15:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../development/basic_concepts.rst:2
msgid "Basic concepts"
msgstr "基本概念"

#: ../../development/basic_concepts.rst:4
msgid ""
"SPU has quite a different programming model than CPU/GPU, this guide "
"introduces the basic concepts."
msgstr "本文档旨在阐述 SPU 的核心概念，SPU 的编程模型与 CPU/GPU 存在显著差异。"

#: ../../development/basic_concepts.rst:7
msgid "Machine model"
msgstr "机器模型"

#: ../../development/basic_concepts.rst:9
msgid ""
"In normal CPU model, we could treat the machine as an *arithmetic "
"blackbox*, which accepts user's *code* and *data*, runs the computation, "
"and returns result *data* to user. If we draw a picture to show the "
"relationship between user and machine, it's something like this."
msgstr "在传统 CPU 模型中，机器可视为一个算术黑箱，其接收用户的代码与数据，执行计算后返回结果数据。用户与机器的关系可示意如下。"

#: ../../development/basic_concepts.rst:13
msgid "user and CPU"
msgstr "CPU 模型"

#: ../../development/basic_concepts.rst:16
msgid ""
"In SPU, the first notable difference is that, *input* is not provided by "
"a single user, it's from **multiple parties**, and the *code* could be "
"provided by a separate party, finally, the output could be received by "
"another party. So **SPU is born to be used in a distributed context**. It"
" looks like:"
msgstr ""

#: ../../development/basic_concepts.rst:20
msgid "multi-user and SPU"
msgstr "SPU 模型"

#: ../../development/basic_concepts.rst:23
msgid ""
"If we take a closer look, SPU itself is not a physical machine, it is "
"hosted by multiple parties that don't trust on each other. For example, "
"in the following picture, we have three parties (red, blue and green) "
"that work together with some MPC protocols, and provide computation "
"service as a **virtual machine**."
msgstr ""

#: ../../development/basic_concepts.rst:27
msgid "inside SPU"
msgstr "SPU 内部架构"

#: ../../development/basic_concepts.rst:30
msgid ""
"So we have treated SPU as a (multi-party visualized) **secure arithmetic "
"blackbox**, which can evaluate computations securely."
msgstr "综上，SPU 可抽象为多方协同的安全算术黑箱，提供安全计算能力。"

#: ../../development/basic_concepts.rst:33
msgid "Programming model"
msgstr "编程模型"

#: ../../development/basic_concepts.rst:35
msgid "With the above VM model, the next question is **how to program on it**?"
msgstr "基于上述虚拟机模型，SPU 的编程需解决以下问题：如何为多方协同计算编写程序？"

#: ../../development/basic_concepts.rst:37
msgid ""
"Inside SPU, each physical node behaves differently for the same progress,"
" i.e. some nodes act as senders, while others act as receivers."
msgstr "SPU 中，各物理节点在同一计算流程中执行不同操作（如发送方与接收方）。"

#: ../../development/basic_concepts.rst:39
msgid ""
"But from the users' (of SPU) perspective, SPU behaves as one single VM. "
"One important responsibility of SPU compiler/runtime pipeline is to "
"translate **homogeneous** program to another for **heterogeneous** "
"runtime engines."
msgstr "但对用户而言，SPU 表现为单一虚拟机。SPU 编译器/运行时的核心职责是将同构程序转换为适配异构运行时引擎的指令。"

#: ../../development/basic_concepts.rst:41
msgid ""
"For example, in the following computation graph, given `x`, `y`, we want "
"to compute `f(x, y)`, and the big circle represent a compute node which "
"can evaluate f."
msgstr "例如，在下面的计算图中，给定 `x`，`y`，我们想要计算 `f（x，y）`，大圆圈表示可以评估 f 的计算节点。"

#: ../../development/basic_concepts.rst:45
msgid ""
"In SPU, a group of nodes work together to provide functionality of `f`, "
"as shown blow."
msgstr "而在 SPU 中，多个节点通过协议协作实现等效功能："

#: ../../development/basic_concepts.rst:49
msgid "With the above abstraction, SPU can:"
msgstr "通过此抽象，SPU 具备以下特性："

#: ../../development/basic_concepts.rst:51
msgid "Hide the underline protocols, *write once, run on all protocols*."
msgstr "协议透明化，一次编码，支持多种底层协议。"

#: ../../development/basic_concepts.rst:52
msgid ""
"Hide the number of parties, *write once, run for a variable number of "
"parties*."
msgstr "规模弹性化，一次编码，适配可变参与方数量。"

#: ../../development/basic_concepts.rst:56
msgid "API level"
msgstr "API 层级"

#: ../../development/basic_concepts.rst:58
msgid ""
"With the above programming model, the next question is **which language "
"is supported**? SPU provides multi-level API, from upper to lower:"
msgstr "基于上述编程模型，接下来支持哪些语言呢？SPU 提供多层 API，从高阶到低阶依次为："

#: ../../development/basic_concepts.rst:60
msgid ""
"**Frontend API** (like TensorFlow/JAX), SPU compiles them into SPU IR "
"before running."
msgstr "Frontend API（如 TensorFlow/JAX），通过 SPU 编译转换为 SPU IR。"

#: ../../development/basic_concepts.rst:61
msgid ""
"**SPU IR**, an Intermediate Representation format defined by SPU, which "
"is not quite readable but easier for computers to understand."
msgstr "SPU IR，一种由 SPU 定义的中间表示格式，其可读性不强，但更易于计算机理解。"

#: ../../development/basic_concepts.rst:62
msgid "**C++ API**, which could directly access the underline MPC protocols."
msgstr "C++ API，可以直接访问底层MPC协议。"

#: ../../development/basic_concepts.rst:64
msgid "The API hierarchy looks like:"
msgstr "API 层次结构如下："

#: ../../development/basic_concepts.rst:69
msgid "SPU API hierarchy"
msgstr "SPU API 层次结构"

#: ../../development/basic_concepts.rst:72
msgid ""
"An important goal of SPU is to allow people to write secure programs with"
" their familiar frameworks they are familiar with, so it's recommended to"
" use Frontend API."
msgstr "SPU 的核心设计目标是让用户使用他们熟悉的框架编写安全程序，推荐优先使用 Frontend API。"

#: ../../development/basic_concepts.rst:74
msgid ""
"Currently, only JAX frontend is supported for now. Please check :doc:`JAX"
" on SPU <../tutorials/quick_start>`."
msgstr "当前仅支持 JAX 前端，详见 :doc:`JAX on SPU <../tutorials/quick_start>`。"

