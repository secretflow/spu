# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Ant Group Co., Ltd.
# This file is distributed under the same license as the SPU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SPU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 15:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../development/pipeline.rst:2
msgid "SPU Pipeline"
msgstr "SPU 管道"

#: ../../development/pipeline.rst:4
msgid ""
"Recall that SPU could be treated as a :ref:`virtual device "
"<development/basic_concepts:Machine model>`. When working with a (virtual"
" or physical) device, we need several steps."
msgstr "前面提到，SPU 可以被视为虚拟设备。使用（虚拟或物理）设备时，我们需要几个步骤。"

#: ../../development/pipeline.rst:6
msgid "infeed code to it"
msgstr "输入代码"

#: ../../development/pipeline.rst:7
msgid "infeed data to it"
msgstr "输入数据"

#: ../../development/pipeline.rst:8
msgid "trigger it to run"
msgstr "触发运行"

#: ../../development/pipeline.rst:9
msgid "get result from it"
msgstr "获取结果"

#: ../../development/pipeline.rst:11
msgid "This page describes details of each step."
msgstr "本页将描述每个步骤的详细信息。"

#: ../../development/pipeline.rst:14
msgid "Overview"
msgstr "概述"

#: ../../development/pipeline.rst:16
msgid ""
"Before diving into the details, let's first take a closer look of SPU "
"pipeline, it's something like this:"
msgstr "在深入了解细节之前，让我们先仔细看看 SPU 管道，它是这样的："

#: ../../development/pipeline.rst:21
msgid "code and data pipeline"
msgstr "代码和数据管道"

#: ../../development/pipeline.rst:24
msgid "Compilation"
msgstr "编译"

#: ../../development/pipeline.rst:26
msgid "The vertical part depicts the compilation pipeline, from top to bottom."
msgstr "垂直部分从上到下描绘了编译管道。"

#: ../../development/pipeline.rst:28
msgid "Programmer writes code in AI frameworks(like TensorFlow/JAX)."
msgstr "程序员在 AI 框架（如 TensorFlow/JAX）中编写代码。"

#: ../../development/pipeline.rst:29
msgid "AI frontend traces the DAG, and emits as XLA IR."
msgstr "AI frontend 跟踪 DAG，并以 XLA IR 形式发出。"

#: ../../development/pipeline.rst:30
msgid ""
"SPU compiler takes XLA IR, and compiles it to SPU IR, the format that SPU"
" runtime understands."
msgstr "SPU 编译器接收 XLA IR，并将其编译为 SPU IR，即 SPU 运行时可以理解的格式。"

#: ../../development/pipeline.rst:32
msgid "For more details, please see :doc:`compiler` for details."
msgstr "更多详细信息请参见 SPU 编译器详情。"

#: ../../development/pipeline.rst:35
msgid "Data pipeline"
msgstr "数据管道"

#: ../../development/pipeline.rst:37
msgid "The horizontal part depicts the data pipeline, from left to right."
msgstr "水平部分从左到右描绘数据管道。"

#: ../../development/pipeline.rst:39
msgid ""
"Data providers use :ref:`SPU io <reference/py_api:Runtime IO>` module to "
"encrypt input data."
msgstr "数据提供者使用 SPU io 模块来加密输入数据。"

#: ../../development/pipeline.rst:41
msgid "For SPU MPC backend, *encrypt* means to split plaintext data into shares."
msgstr "对于 SPU MPC 后端，加密意味着将明文数据分成几部分。"

#: ../../development/pipeline.rst:42
msgid "For floating-point data, encoding to fixed-point may be also required."
msgstr "对于浮点数据，可能还需要编码为定点。"

#: ../../development/pipeline.rst:44
msgid ""
"The encrypted data is sent to :ref:`SPU runtime <reference/py_api:Runtime"
" Setup>`."
msgstr "加密数据被发送到 SPU 运行时。"

#: ../../development/pipeline.rst:45
msgid ""
"The output data is fetched by *result owner*, and decrypted by the "
":ref:`SPU io <reference/py_api:Runtime IO>` module."
msgstr "输出数据由SPU io 模块解密后提供给数据获取者。"

#: ../../development/pipeline.rst:49
msgid "Just in time"
msgstr "即时编译"

#: ../../development/pipeline.rst:51
msgid ""
"JIT is short for `Just-in-time compilation <https://en.wikipedia.org/wiki"
"/Just-in-time_compilation>`_, with this approach, the compiler can get "
"more information, such as input shapes, than in `AOT mode "
"<https://en.wikipedia.org/wiki/Ahead-of-time_compilation>`_. JIT may "
"introduce more evaluation overhead, but it's really trivial in secure "
"computation setting."
msgstr ""

#: ../../development/pipeline.rst:53
msgid ""
"In SPU, JIT has more benefits since the backend engine may be orders of "
"magnitude faster if it knows the *visibility* of data. For example, when "
"multiplying two secrets, the backend MPC engine may involve expensive "
"*beaver triple* progress, but when one of the inputs (of multiply) is "
"public known to all parties, the operation will be much faster. So we "
"should *mark* as much data as possible to be *public* (if it doesn't need"
" to be protected), and tell the compiler these information."
msgstr ""

#: ../../development/pipeline.rst:55
msgid ""
"So, SPU compilation normally happens after all data infeed is done, and "
"`just in time` before the real evaluation."
msgstr "因此，SPU 编译通常在所有数据输入完成后进行，并且在实际评估之前进行即时编译。"

