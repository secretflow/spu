# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Ant Group Co., Ltd.
# This file is distributed under the same license as the SPU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SPU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 15:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../development/ir_dump.rst:2
msgid "Dump IR to DAG"
msgstr ""

#: ../../development/ir_dump.rst:5
msgid ""
"The configuration for dump IR to DAG maybe unstable. Please refer to the "
":spu_code_host:`spu.proto <spu/blob/main/libspu/spu.proto>` for latest "
"configurations."
msgstr ""

#: ../../development/ir_dump.rst:8
msgid "Introduction"
msgstr ""

#: ../../development/ir_dump.rst:9
msgid ""
"This document provides the demo for how to dump the IR (Intermediate "
"Representation, generated by `XLA "
"<https://www.tensorflow.org/xla/architecture>`_) to a DAG. With the aid "
"of visualized DAG, the execution logic and required operators will be "
"more explicit."
msgstr ""

#: ../../development/ir_dump.rst:14
msgid ""
"Please refer to :ref:`/development/compiler.rst` for description of the "
"role of XLA in SPU."
msgstr ""

#: ../../development/ir_dump.rst:18
msgid "TL;DR"
msgstr ""

#: ../../development/ir_dump.rst:19
msgid ""
"In case you just want to have a try on obtaining the DAG for executed "
"code, we provide a :spu_code_host:`demo "
"<spu/blob/main/examples/python/ir_dump/ir_dump.py>` that demonstrates the"
" required code modifications to enable dumping the IR of executed code to"
" a custom path."
msgstr ""

#: ../../development/ir_dump.rst:21
msgid ""
"For those users who have designated requirements (e.g., dump to txt, dot,"
" html), we recommend to read the following detailed step-by-step "
"elaborations."
msgstr ""

#: ../../development/ir_dump.rst:25
msgid "Configuration"
msgstr ""

#: ../../development/ir_dump.rst:26
msgid ""
"Please first have a look at the :spu_code_host:`spu.proto "
"<spu/blob/main/libspu/spu.proto>` for SPU. To dump the IR, we should "
"modify the compiler options, which is shown in the following code "
"snippet."
msgstr ""

#: ../../development/ir_dump.rst:28
msgid "Compiler Options"
msgstr ""

#: ../../development/ir_dump.rst:59
msgid "The part of the above code related to dumping IR to DAG is as follows."
msgstr ""

#: ../../development/ir_dump.rst:61
msgid "Configurations related to dump IR"
msgstr ""

#: ../../development/ir_dump.rst:69
msgid ""
"In general, we require to focus on three variables to control the dump "
"behavior."
msgstr ""

#: ../../development/ir_dump.rst:71
msgid ""
"**enable_pretty_print** is a *bool* value, which denotes whether to dump "
"the IR or not."
msgstr ""

#: ../../development/ir_dump.rst:72
msgid ""
"**pretty_print_dump_dir** is a *string* value, which denotes the dump "
"path (should be a directory)."
msgstr ""

#: ../../development/ir_dump.rst:73
msgid ""
"**xla_pp_kind** is a *int* value, of which the range is [0, 1, 2], with "
"each one representing one dump format. To date, we support three kinds of"
" formats: TEXT, DOT and HTML. If you want to obtain the DAG, you should "
"use DOT or HTML."
msgstr ""

#: ../../development/ir_dump.rst:76
msgid ""
"For **DOT** files, you should use `GraphViz <https://graphviz.org/>`_ to "
"convert them to PDF or PNG to visualize the DAG."
msgstr ""

#: ../../development/ir_dump.rst:78
msgid ""
"While for **HTML** files, you can directly open the them in your Web "
"Browser, which shall render the DAG."
msgstr ""

#: ../../development/ir_dump.rst:80
msgid "XLA Pretty Print Kind"
msgstr ""

#: ../../development/ir_dump.rst:91
msgid "Pass custom compiler options"
msgstr ""

#: ../../development/ir_dump.rst:92
msgid ""
"We hereby describe how to manually pass the custom compiler options to "
"dump the IR of executed code."
msgstr ""

#: ../../development/ir_dump.rst:94
msgid ""
"First of all, we declare an CompilerOptions object. Note that the "
"**pretty_print_dump_dir** is better to be an absolute path."
msgstr ""

#: ../../development/ir_dump.rst:96
msgid "Declare CompilerOptions object"
msgstr ""

#: ../../development/ir_dump.rst:105
msgid "Then we pass the CompilerOptions to the executed SPU code."
msgstr ""

#: ../../development/ir_dump.rst:108
msgid "The code shall be modified from"
msgstr ""

#: ../../development/ir_dump.rst:110
msgid "SPU execution without customized compiler options"
msgstr ""

#: ../../development/ir_dump.rst:115
msgid "to"
msgstr ""

#: ../../development/ir_dump.rst:117
msgid "SPU execution with customized compiler options"
msgstr ""

#: ../../development/ir_dump.rst:123
msgid ""
"Here, `func` is a Python function. Please refer to the "
":spu_code_host:`demo <spu/blob/main/examples/python/ir_dump/ir_dump.py>` "
"for the context."
msgstr ""

#: ../../development/ir_dump.rst:125
msgid ""
"In the end, you can just run the target code and the output (e.g., DOT) "
"can be found in **your custom path**."
msgstr ""

#: ../../development/ir_dump.rst:128
msgid "Example"
msgstr ""

#: ../../development/ir_dump.rst:129
msgid ""
"We here provide the code snippet for dumping IR to HTML files. The DAG "
"for the executed function is illustrated in the end."
msgstr ""

#: ../../development/ir_dump.rst:131
msgid "Code snippet for dumping the IR of func"
msgstr ""

#: ../../development/ir_dump.rst:165
msgid ""
"You may find multiple files in the output directory since XLA has "
"multiple compile passes and generates multiple IRs, with each "
"corresponding to one DAG."
msgstr ""

#: ../../development/ir_dump.rst:168
msgid "The **HTML** output is rendered as follows."
msgstr ""

#: ../../development/ir_dump.rst:173
msgid "DAG for executed demo function"
msgstr ""

