# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Ant Group Co., Ltd.
# This file is distributed under the same license as the SPU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SPU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 15:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../development/design_device.rst:2
msgid "Design: generic device"
msgstr ""

#: ../../development/design_device.rst:5
msgid ""
"This is a design draft for using SPU from SecretFlow, not an accurate "
"document for SPU itself. It could be treated as a reference to integrate "
"SPU from other systems."
msgstr ""

#: ../../development/design_device.rst:8
msgid "Overview"
msgstr "概述"

#: ../../development/design_device.rst:10
msgid ""
"This document discusses the design of a trust chain under an universal "
"device concept."
msgstr ""

#: ../../development/design_device.rst:13
msgid "Concept"
msgstr ""

#: ../../development/design_device.rst:15
msgid ""
"**Device**, a virtual concept which can evaluate a piece of code, "
"normally a specific device provides some specific abilities, i.e. CPU is "
"a device for general computation, GPU is a device for parallel "
"computation, HE/MPC evaluator are devices for security computation. "
"Formally, a device is a set of ops :math:`\\left \\{  OP_{i} \\right "
"\\}`."
msgstr ""

#: ../../development/design_device.rst:17
msgid ""
"*DeviceObject* an object which could be operated by the device, formally,"
" it's a set of data :math:`\\left \\{  D_{i} \\right \\}`."
msgstr ""

#: ../../development/design_device.rst:18
msgid ""
"*Consistency property* is `if type(Di) == type(Dj) and OP works for Di, "
"it also works for Dj`"
msgstr ""

#: ../../development/design_device.rst:19
msgid ""
"*Complete property* is that :math:`\\left \\{  OP_{i} \\right \\}` is "
"*turing complete*"
msgstr ""

#: ../../development/design_device.rst:21
msgid ""
"**Node**, a physical node which provides general computing environment, "
"it could host devices."
msgstr ""

#: ../../development/design_device.rst:23
msgid ""
"**Computation** or DAG, is a form to represent logic function, with "
"*node* as operator and *edge* as data."
msgstr ""

#: ../../development/design_device.rst:25
msgid ""
"**SecretFlow**, is a framework that could schedule a *Computation* to a "
"list of *Device*, with respect that:"
msgstr ""

#: ../../development/design_device.rst:27
msgid ""
"**Securely data transferred** across devices, unless the client "
"explicitly makes an unsafe transfer."
msgstr ""

#: ../../development/design_device.rst:28
msgid ""
"Each op runs on exactly on one device, **there is no cross-device "
"function**."
msgstr ""

#: ../../development/design_device.rst:32
msgid "Notations"
msgstr ""

#: ../../development/design_device.rst:38
msgid "*empty shape* stands for **Node**"
msgstr ""

#: ../../development/design_device.rst:39
msgid "*colored shape* stands for **Device**"
msgstr ""

#: ../../development/design_device.rst:40
msgid "*dotted line* stands for **no trust** relation between devices."
msgstr ""

#: ../../development/design_device.rst:41
msgid ""
"*dotted line with arrow* stands for **weak trust** relation, one device "
"could send its encrypted data to another without data loss."
msgstr ""

#: ../../development/design_device.rst:42
msgid ""
"*solid line with arrow* stands for **strong trust** relation, one device "
"could send its raw data to another without data loss."
msgstr ""

#: ../../development/design_device.rst:47
msgid "Device layout"
msgstr ""

#: ../../development/design_device.rst:50
msgid "Outsourcing (MPC)"
msgstr ""

#: ../../development/design_device.rst:54
msgid ""
"In above deployment, we use 6 nodes to construct 4 devices, where circle "
"devices have weak trust to the triangle device."
msgstr ""

#: ../../development/design_device.rst:57
msgid "Colocated (MPC)"
msgstr ""

#: ../../development/design_device.rst:61
msgid ""
"In above deployment, we use 3 nodes to construct 4 devices, where circle "
"devices have weak trust to the triangle device."
msgstr ""

#: ../../development/design_device.rst:63
msgid ""
"Note, in this configuration, we use 3 nodes to build exactly the same "
"device layout as the 6 node out-sourcing mode, the client code could run "
"exactly the same without any changes. That is **write once, run "
"anywhere**."
msgstr ""

#: ../../development/design_device.rst:66
msgid "Server-aided (MPC)"
msgstr ""

#: ../../development/design_device.rst:70
msgid ""
"In this configuration, one server does not provide data but participates "
"in the computation, it's so called a `server-aided`."
msgstr ""

#: ../../development/design_device.rst:73
msgid "HE device"
msgstr ""

#: ../../development/design_device.rst:77
msgid "In this mode, we use 2 nodes to virtualize 3 devices, with that:"
msgstr ""

#: ../../development/design_device.rst:79
msgid ""
"The *magenta device* colocated with *yellow CPU device*, with a *strong "
"trust* relationship."
msgstr ""

#: ../../development/design_device.rst:80
msgid ""
"The *red CPU device* and the *magenta HE device* forms a *weak trust* "
"relationship."
msgstr ""

#: ../../development/design_device.rst:84
msgid "In this configuration, we use 2 nodes to virtualize 4 devices, with that:"
msgstr ""

#: ../../development/design_device.rst:86
msgid ""
"each *circle device* has one *strong trust* with one *diamond device* "
"while a *weak trust* to another *diamond device*."
msgstr ""

#: ../../development/design_device.rst:90
msgid ""
"In this configuration, we have 3 nodes. For clarity, we name upper one as"
" Alice, lower-left as Bob, lower-right as Charlie."
msgstr ""

#: ../../development/design_device.rst:92
#, python-brace-format
msgid ""
"Both {Bob, Charlie} would encrypt their data and send it to Alice, we "
"have to do possible device abstractions."
msgstr ""

#: ../../development/design_device.rst:94
msgid ""
"In the middle, there is only one *HE device*, which could be used to "
"compute all cipher-texts."
msgstr ""

#: ../../development/design_device.rst:96
msgid ""
"pros: there is only one HE device per-node, which means if we have N "
"parties, we have at most N HE-devices."
msgstr ""

#: ../../development/design_device.rst:97
msgid ""
"cons: it breaks the *Consistency property*, i.e. `add::([x], [y])` add "
"two cipher-texts could not be done if two cipher-texts come from "
"different parties. Another example: when doing output, Bob may get a "
"cipher-text from the *HE-device*, but he can not decrypt it, since he "
"does not have the right key. @jint, IMHO, *Consistency* is the key-point "
"to guide programmers, **it's confusing if an op sometime work, sometimes "
"not**."
msgstr ""

#: ../../development/design_device.rst:99
msgid ""
"In the right configuration, there are 2 *HE device*, both reside on "
"Alice, but one for Bob and one for Charlie."
msgstr ""

#: ../../development/design_device.rst:101
msgid "pros: Consistency, the device concept is exactly the same as MPC/TEE."
msgstr ""

#: ../../development/design_device.rst:102
msgid ""
"cons: there will be at most :math:`N^2` HE devices for N nodes. This "
"might not be a problem since it depicts the 2PC property of HE (@jint)."
msgstr ""

#: ../../development/design_device.rst:106
msgid "Device and Node"
msgstr ""

#: ../../development/design_device.rst:108
msgid ""
"A device is composed by one or more nodes, this section covers the common"
" used device/node pattern in SecretFlow."
msgstr ""

#: ../../development/design_device.rst:110
msgid "For CPU and MPC, it's easy."
msgstr ""

#: ../../development/design_device.rst:112
msgid "A CPU device is composed by only one node."
msgstr ""

#: ../../development/design_device.rst:113
msgid "An MPC device is composed by a list of nodes (unordered)."
msgstr ""

#: ../../development/design_device.rst:115
msgid ""
"For HE device, it's a bit of complicated, it's composed by a pair of "
"nodes `(location, key-owner)`"
msgstr ""

#: ../../development/design_device.rst:117
msgid "**Location node** is the node that the evaluator located on."
msgstr ""

#: ../../development/design_device.rst:118
#, python-brace-format
msgid "**KeyOwner node** is the node that provides `{PK, SK}`"
msgstr ""

#: ../../development/design_device.rst:120
msgid "Formally, we can define devices via a configuration file."
msgstr ""

#: ../../development/design_device.rst:131
msgid "For example:"
msgstr ""

#: ../../development/design_device.rst:156
msgid "Let's ignore the SPU device for a moment, the CPU and HEU looks like this:"
msgstr ""

#: ../../development/design_device.rst:160
msgid ""
"In this example, `HEU` computation part is strait-forward, the non-"
"trivial part is the IO (device-to-device transfer). Let's consider "
"several IO cases."
msgstr ""

#: ../../development/design_device.rst:162
msgid ""
"First, transfer data from `P1` to `HEU`, in this case, from device "
"concept level, `P1` **strong trust** on `HEU`, so it can send plaintext "
"directly to `HEU`. In implementation, `P1` is colocated with `HEU`, so it"
" makes sense for a plaintext transfer."
msgstr ""

#: ../../development/design_device.rst:163
msgid ""
"Second, transfer data from `P2` to `HEU`, in device concept, `P2` **weak "
"trust** `HEU`, so it has to encrypt the data with SK, then sends it to "
"`HEU`. From implementation point of view, `P2` has the private key, so it"
" can do the encryption."
msgstr ""

#: ../../development/design_device.rst:164
msgid ""
"Third case, transfer data devices other than `P1` and `P2` to `HEU`, in "
"this case, it's neither colocated with `HEU` nor key-provider of `HEU`, "
"it's just a participant, which has a `weak trust` relationship with "
"`HEU`, and will request `PK` from the `HEU`."
msgstr ""

#: ../../development/design_device.rst:190
msgid "As said before, when the IO is ready, it's trivial to fire jobs on it."
msgstr ""

#: ../../development/design_device.rst:192
msgid ""
"For output, a notable part of `HEU` is that, it could only reveal the "
"result to the `key-owner` node. If you want to output to a node other "
"than `key-owner node`, you have to ask key-owner node for help. This "
"depicts the fact that HE is indeed a 2PC device, so more than 2PC cases "
"should be handled specially."
msgstr ""

