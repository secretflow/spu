# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Ant Group Co., Ltd.
# This file is distributed under the same license as the SPU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SPU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 15:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../development/design_workflow.rst:2
msgid "Design: workflow"
msgstr ""

#: ../../development/design_workflow.rst:5
msgid ""
"This is an early stage design document, the concepts may not match the "
"implementation."
msgstr ""

#: ../../development/design_workflow.rst:8
msgid "Concepts"
msgstr ""

#: ../../development/design_workflow.rst:11
msgid "Components"
msgstr ""

#: ../../development/design_workflow.rst:13
msgid ""
"Before formal definition of SPU components, we define kinds of entities "
"first."
msgstr ""

#: ../../development/design_workflow.rst:15
msgid ""
"*Entity*: an entity is a lib/process/service which could be deployed to "
"provide some functionalities."
msgstr ""

#: ../../development/design_workflow.rst:16
msgid ""
"*Virtual entity*: a virtual entity is a group of entities which "
"cooperates to provide some functionalities."
msgstr ""

#: ../../development/design_workflow.rst:18
msgid "SPU component is an entity or virtual entity."
msgstr ""

#: ../../development/design_workflow.rst:20
msgid ""
"**Compiler**: is an entity which translates/optimizes a XLA DAG to a SPU "
"DAG."
msgstr ""

#: ../../development/design_workflow.rst:21
msgid ""
"**(Compute) Engine**: is an entity that cooperates with other engines to "
"do secure evaluation."
msgstr ""

#: ../../development/design_workflow.rst:22
msgid ""
"**Virtual Machine**: is a virtual entity which consists of a group of "
"engines, and can launch a SPU computation."
msgstr ""

#: ../../development/design_workflow.rst:23
msgid ""
"**Storage Engine**: is an entity which provides input data (data "
"provider) or receives output data (data sink)."
msgstr ""

#: ../../development/design_workflow.rst:24
msgid ""
"**Virtual Storage**: is a virtual entity which contains a group of "
"storage engines."
msgstr ""

#: ../../development/design_workflow.rst:25
msgid ""
"**Driver**: is an entity which drives all entities/virtual engines to "
"jointly complete a secure evaluation."
msgstr ""

#: ../../development/design_workflow.rst:28
msgid ""
"SPU components are typically hosted by several parties which do not trust"
" each other. We usually assign different roles to these parties."
msgstr ""

#: ../../development/design_workflow.rst:30
msgid "Kind of roles:"
msgstr ""

#: ../../development/design_workflow.rst:32
msgid "**Data provider**: which hosts storage engine."
msgstr ""

#: ../../development/design_workflow.rst:33
msgid "**Algorithm provider**: which provides the algorithm."
msgstr ""

#: ../../development/design_workflow.rst:34
msgid "**Computing provider**: which hosts one or more compute engines."
msgstr ""

#: ../../development/design_workflow.rst:36
msgid "Note, one party may have multiple roles, for example:"
msgstr ""

#: ../../development/design_workflow.rst:38
msgid "one party could provide data while also participate in the computation."
msgstr ""

#: ../../development/design_workflow.rst:39
msgid ""
"one party could host all compute engines and claim that engines do not "
"collude with each other, that is the 'out-sourcing mode'."
msgstr ""

#: ../../development/design_workflow.rst:42
msgid "Compare to classic architecture"
msgstr ""

#: ../../development/design_workflow.rst:44
msgid "comparison to classic architecture."
msgstr ""

#: ../../development/design_workflow.rst:48
msgid "SPU"
msgstr ""

#: ../../development/design_workflow.rst:49
msgid "Classic"
msgstr ""

#: ../../development/design_workflow.rst:50
msgid "Difference"
msgstr ""

#: ../../development/design_workflow.rst:51
msgid "SPU VM"
msgstr ""

#: ../../development/design_workflow.rst:52
msgid "CPU"
msgstr ""

#: ../../development/design_workflow.rst:53
msgid "SPU VM composed by multiple engines who follows MPC protocol"
msgstr ""

#: ../../development/design_workflow.rst:54
msgid "SPU VS"
msgstr ""

#: ../../development/design_workflow.rst:55
msgid "Disks"
msgstr ""

#: ../../development/design_workflow.rst:56
msgid "SPU storage composed by multiple participants who do not trust each other"
msgstr ""

#: ../../development/design_workflow.rst:57
#: ../../development/design_workflow.rst:228
msgid "Data infeed"
msgstr ""

#: ../../development/design_workflow.rst:58
msgid "Disk read"
msgstr ""

#: ../../development/design_workflow.rst:59
msgid "SPU data infeed will make data invisible to engines."
msgstr ""

#: ../../development/design_workflow.rst:60
#: ../../development/design_workflow.rst:309
msgid "Data outfeed"
msgstr ""

#: ../../development/design_workflow.rst:61
msgid "Disk write"
msgstr ""

#: ../../development/design_workflow.rst:62
msgid "SPU data output will reveal value from engines."
msgstr ""

#: ../../development/design_workflow.rst:66
msgid "Deployment"
msgstr ""

#: ../../development/design_workflow.rst:68
msgid "A SPU component can be deployed:"
msgstr ""

#: ../../development/design_workflow.rst:70
msgid "**As a lib**: used by other applications, (i.e. python runtime)"
msgstr ""

#: ../../development/design_workflow.rst:71
msgid "**As a binary**: that could be used as a standalone program."
msgstr ""

#: ../../development/design_workflow.rst:72
msgid "**As a service**: that could be called remotely."
msgstr ""

#: ../../development/design_workflow.rst:74
msgid "Component deployment method."
msgstr ""

#: ../../development/design_workflow.rst:78
msgid "Component"
msgstr ""

#: ../../development/design_workflow.rst:79
msgid "As a lib"
msgstr ""

#: ../../development/design_workflow.rst:80
msgid "As a binary"
msgstr ""

#: ../../development/design_workflow.rst:81
msgid "As a service"
msgstr ""

#: ../../development/design_workflow.rst:82
msgid "Compiler/C++"
msgstr ""

#: ../../development/design_workflow.rst:83
#: ../../development/design_workflow.rst:95
msgid "expose pybind"
msgstr ""

#: ../../development/design_workflow.rst:84
msgid "standalone compiler"
msgstr ""

#: ../../development/design_workflow.rst:85
msgid "close-source, focus on optimization"
msgstr ""

#: ../../development/design_workflow.rst:86
msgid "Engine/C++"
msgstr ""

#: ../../development/design_workflow.rst:87
#: ../../development/design_workflow.rst:88
#: ../../development/design_workflow.rst:91
#: ../../development/design_workflow.rst:92
#: ../../development/design_workflow.rst:96
#: ../../development/design_workflow.rst:97
msgid "N/A"
msgstr ""

#: ../../development/design_workflow.rst:89
#: ../../development/design_workflow.rst:93
msgid "standalone service program"
msgstr ""

#: ../../development/design_workflow.rst:90
msgid "Storage Engine/C++"
msgstr ""

#: ../../development/design_workflow.rst:94
msgid "Driver/python"
msgstr ""

#: ../../development/design_workflow.rst:100
msgid "Deployment unit."
msgstr ""

#: ../../development/design_workflow.rst:102
msgid ""
"**SPU Daemon**: is a program that serves *compute engine* or *storage "
"engine*"
msgstr ""

#: ../../development/design_workflow.rst:103
msgid "**SPU Compiler**: is a program that translates/optimizes XLA IR to SPU IR."
msgstr ""

#: ../../development/design_workflow.rst:104
msgid "**driver**: is a lib which drives compile/data-placement/run pipeline."
msgstr ""

#: ../../development/design_workflow.rst:108
msgid "Workflow"
msgstr ""

#: ../../development/design_workflow.rst:110
msgid "The following diagram shows a typical control flow of SPU computation."
msgstr ""

#: ../../development/design_workflow.rst:115
msgid "The whole control flow is driven by the driver/controller."
msgstr ""

#: ../../development/design_workflow.rst:117
msgid "Ask ML framework to compile a model into XLA IR."
msgstr ""

#: ../../development/design_workflow.rst:118
msgid "Ask SPU Compiler to compile XLA IR into SPU IR."
msgstr ""

#: ../../development/design_workflow.rst:119
msgid "Ask storage engines to infeed data to engine's symbol table."
msgstr ""

#: ../../development/design_workflow.rst:120
msgid "Ask compute engines to run SPU IR."
msgstr ""

#: ../../development/design_workflow.rst:121
msgid "Ask storage engine to outfeed from engine's symbol table."
msgstr ""

#: ../../development/design_workflow.rst:126
msgid "Simple workflow"
msgstr ""

#: ../../development/design_workflow.rst:128
msgid "The following diagram shows detailed steps:"
msgstr ""

#: ../../development/design_workflow.rst:181
msgid ""
"**step 1**, driver writes a normal tensorflow program that could be "
"decorated with `tf.function`."
msgstr ""

#: ../../development/design_workflow.rst:182
msgid "**step 2-3** driver asks virtual storage to instantiate dataset."
msgstr ""

#: ../../development/design_workflow.rst:183
msgid ""
"**step 4-5** driver asks virtual storage to load next batch, get a "
"reference to remote tensor."
msgstr ""

#: ../../development/design_workflow.rst:184
msgid ""
"**step 6-7** driver asks tensorflow engine to compile the program into "
"XLA.HLO, with reference tensor."
msgstr ""

#: ../../development/design_workflow.rst:185
msgid "**step 8-9** driver asks SPU Compiler to compile the XLA.HLO into SPU IR."
msgstr ""

#: ../../development/design_workflow.rst:186
msgid ""
"**step 10-13** driver asks virtual storage to infeed data into VM's "
"symbol table."
msgstr ""

#: ../../development/design_workflow.rst:187
msgid "**step 14-15** driver asks VM to run compiled SPU IR."
msgstr ""

#: ../../development/design_workflow.rst:188
msgid ""
"**step 16-19** driver asks virtual storage to outfeed data from VM's "
"symbol table."
msgstr ""

#: ../../development/design_workflow.rst:190
msgid ""
"In the above steps, **step 4-5**, **step 10-19** are virtual steps, since"
" both virtual machine and virtual storage are *virtual object* that can "
"not be interacted directly."
msgstr ""

#: ../../development/design_workflow.rst:192
msgid ""
"The concrete steps is defined by the virtual machine and storage layout. "
"For example:"
msgstr ""

#: ../../development/design_workflow.rst:194
msgid ""
"suppose we have 2 data sources *Alice* and *Bob*, where *Alice* also acts"
" as a data sink."
msgstr ""

#: ../../development/design_workflow.rst:195
msgid "suppose we have 3 compute engines, which compose a 3-PC virtual machine."
msgstr ""

#: ../../development/design_workflow.rst:196
msgid ""
"suppose input `x` comes from *Alice*, `y` comes from *Bob*, and the "
"output `z` is revealed to *Alice*."
msgstr ""

#: ../../development/design_workflow.rst:199
msgid "Data load"
msgstr ""

#: ../../development/design_workflow.rst:223
msgid "**step 1-2** *Alice* loads symbol 'x' into it's local symbol table."
msgstr ""

#: ../../development/design_workflow.rst:224
msgid "**step 3-4** *Bob* loads symbol 'y' into it's local symbol table."
msgstr ""

#: ../../development/design_workflow.rst:230
msgid "The above **step 9-12** does data infeed, the concrete steps look like:"
msgstr ""

#: ../../development/design_workflow.rst:269
msgid ""
"**step 1-5** and **step 6-10** ask *Alice* and *Bob* to do infeed "
"simultaneously, and could be done in parallel."
msgstr ""

#: ../../development/design_workflow.rst:270
msgid ""
"**step 2**, *Alice* splits `x` into shares `(x1, x2, x3)`, note: this "
"progress is mpc-protocol dependent."
msgstr ""

#: ../../development/design_workflow.rst:271
msgid ""
"**step 3-5**, *Alice* sends slices of `xi` to each of the engines, could "
"be done in parallel."
msgstr ""

#: ../../development/design_workflow.rst:272
msgid "**step 6-10**, *Bob* does the same thing as *Alice*."
msgstr ""

#: ../../development/design_workflow.rst:276
msgid "Run"
msgstr ""

#: ../../development/design_workflow.rst:304
msgid ""
"**step 1-2**, driver asks Engine-0 to run the compiled program, note, the"
" input data is feed at this time."
msgstr ""

#: ../../development/design_workflow.rst:305
msgid "**step 3-4, 5-6** driver asks Engine-1 & 2 to do the same thing."
msgstr ""

#: ../../development/design_workflow.rst:311
msgid ""
"Note in this example, *Alice* also acts as the data sink, the output is "
"revealed to *Alice*."
msgstr ""

#: ../../development/design_workflow.rst:338
msgid ""
"**step 2-7** *Alice* gathers sharings of `z` from engines, note: this "
"progress is mpc-protocol dependent."
msgstr ""

#: ../../development/design_workflow.rst:339
msgid "**step 8** *Alice* reconstructs the result locally."
msgstr ""

#: ../../development/design_workflow.rst:343
msgid "Full workflow"
msgstr ""

#: ../../development/design_workflow.rst:345
msgid "The following diagram shows workflow with local VS local processing."
msgstr ""

#: ../../development/design_workflow.rst:405
msgid ""
"In the above picture, we can do local computation on *VS* side, which "
"makes it suitable for FL like application."
msgstr ""

