# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021 Ant Group Co., Ltd.
# This file is distributed under the same license as the SPU package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SPU \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-13 15:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../development/runtime.rst:2
msgid "SPU Runtime"
msgstr ""

#: ../../development/runtime.rst:5
msgid "Architecture"
msgstr ""

#: ../../development/runtime.rst:7
msgid "Here is the big picture of SPU VM."
msgstr ""

#: ../../development/runtime.rst:11
msgid ""
"The top 3 blocks above *SPU VM* are applications, we could ignore them "
"for now."
msgstr ""

#: ../../development/runtime.rst:12
msgid "The bottom left block is the scheduling component."
msgstr ""

#: ../../development/runtime.rst:13
msgid ""
"The main block is the SPU Architecture, which is the core for secure "
"evaluation."
msgstr ""

#: ../../development/runtime.rst:15
msgid "Inside SPU, there are multiple layers, from bottom to up:"
msgstr ""

#: ../../development/runtime.rst:17
msgid ""
"**System layer** provides the basic computation and communication ability"
" for the upper layers."
msgstr ""

#: ../../development/runtime.rst:18
msgid ""
"**Crypto layer** is the key for secure computation, it's composed by 3 "
"sub layers."
msgstr ""

#: ../../development/runtime.rst:20
msgid ""
"**Basic** or classic layer, provides classic cryptography, OT, HE also "
"lives in this layer."
msgstr ""

#: ../../development/runtime.rst:21
msgid ""
"**Correlation** or the offline protocol layer, provides correlation like "
"beaver triple and randbit."
msgstr ""

#: ../../development/runtime.rst:22
msgid ""
"**Protocol** or the online protocol layer, applies random correlation and"
" runs the secure evaluation."
msgstr ""

#: ../../development/runtime.rst:24
msgid ""
"**ALU layer** converts MPC protocols into a programmable machine, which "
"has two sub layers."
msgstr ""

#: ../../development/runtime.rst:26
msgid ""
"**Ring 2^k** layer, just like normal CPU, hides cryptography layer's "
"details and provides standard ring2k arithmetic."
msgstr ""

#: ../../development/runtime.rst:27
msgid ""
"**Fixed point** layer uses fixed point encoding to represent a fractional"
" number and provides basic arithmetic operations over them."
msgstr ""

#: ../../development/runtime.rst:29
msgid ""
"**OPS layer** is designed to be extensible, in this layer we can define "
"multiple modules based on *ALU layer* and finally exposed to VM clients "
"via bindings or SPU IR."
msgstr ""

#: ../../development/runtime.rst:32
msgid "Homogeneous and Heterogeneous"
msgstr ""

#: ../../development/runtime.rst:34
msgid ""
"Recall that SPU VM is composed of multiple physical engines, the "
"definitions of *homogeneous* and *heterogeneous* come from an *engines*' "
"perspective."
msgstr ""

#: ../../development/runtime.rst:36
msgid ""
"**Homogeneous**: a layer is *homogeneous* means that all engines run "
"exactly the same code in this layer. The user of this layer doesn't have "
"to distinguish between engines, they cannot and should not send/recv "
"messages between engines, in other words, they can treat all engines the "
"same, and program them as one machine."
msgstr ""

#: ../../development/runtime.rst:37
msgid ""
"**Heterogeneous**: in contrast, a layer is *heterogeneous* means that "
"engines in this layer behave differently (following some protocols). The "
"author of this layer should take care of the behavior of each engine to "
"make things correct."
msgstr ""

#: ../../development/runtime.rst:39
msgid ""
"We want SPU VM to be *homogeneous*, so we can treat it as a normal "
"virtual device when applying secure evaluation. For example, in the "
"following computation graph, given `x`, `y`, we want to compute `f(x, "
"y)`, the big circle represents a computing node which can evaluate f."
msgstr ""

#: ../../development/runtime.rst:43
msgid ""
"In secure computation mode, we have a group of servers working together "
"to provide the functionality of `f`, as shown blow."
msgstr ""

#: ../../development/runtime.rst:47
msgid ""
"The secure protocol (MPC protocol) itself is **heterogeneous**, three "
"servers inside the big circle may behave differently, in this pic, the "
"lower part is blue, which means three servers act and interact "
"differently."
msgstr ""

#: ../../development/runtime.rst:49
msgid ""
"But they together provide a **homogeneous** interface to the upper layer,"
" in this pic, the upper half is orange, three servers behave exactly the "
"same, so in the whole computation DAG, the big circle could be treated as"
" one (virtual) node."
msgstr ""

#: ../../development/runtime.rst:51
msgid ""
"Another reason to use **homogeneous** IR is to hide the number of "
"parties, so the application can switch to an m-PC protocol from an n-PC "
"protocol without code change."
msgstr ""

#: ../../development/runtime.rst:53
msgid ""
"One of *SPU*'s goal is to hide the heterogeneous part and expose "
"homogeneous API."
msgstr ""

#: ../../development/runtime.rst:56
msgid "VM Layout"
msgstr ""

#: ../../development/runtime.rst:58
msgid ""
"SPU, as a virtual device, is hosted by multiple physical devices. The "
"relationship between physical devices and SPU is very flexible. Now let's"
" use some examples to illustrate the possible layouts."
msgstr ""

#: ../../development/runtime.rst:61
msgid ""
"Programmers coding toward the virtual layout, the underline physical is "
"**transparent** from the programmer's perspective. It's free to use "
"different physical layouts, without changing a single line of code."
msgstr ""

#: ../../development/runtime.rst:64
msgid "Outsourcing"
msgstr ""

#: ../../development/runtime.rst:66
msgid ""
"In this mode, data providers send data shares to a group of non-colluding"
" computation providers who cooperate to evaluate secure computations."
msgstr ""

#: ../../development/runtime.rst:70
msgid ""
"The figure to left depicts the physical layout, there are 6 physical "
"nodes, mutually connected but untrusted to each other."
msgstr ""

#: ../../development/runtime.rst:72
msgid "The circle stands for data provider."
msgstr ""

#: ../../development/runtime.rst:73
msgid ""
"The triangle stands for computing provider, three triangle nodes agree on"
" some MPC protocol."
msgstr ""

#: ../../development/runtime.rst:75
msgid "The figure to the right depicts the virtual layout."
msgstr ""

#: ../../development/runtime.rst:77
msgid "The circle has one-to-one relation to the physical nodes."
msgstr ""

#: ../../development/runtime.rst:78
msgid "3 triangle nodes are treated as a single virtual device."
msgstr ""

#: ../../development/runtime.rst:81
msgid "Colocated"
msgstr ""

#: ../../development/runtime.rst:83
msgid ""
"In this mode, data providers also participate in the computation "
"progress, that is, data providers are **colocated** with computing "
"providers."
msgstr ""

#: ../../development/runtime.rst:87
msgid ""
"On the left side, there are 3 physical nodes, each of which acts as data "
"provider as well as computing provider."
msgstr ""

#: ../../development/runtime.rst:88
msgid ""
"On the right side, **SPU is a pure virtual node, constructed by physical "
"nodes**."
msgstr ""

#: ../../development/runtime.rst:91
msgid ""
"The number of computing nodes could be larger than that of data nodes in "
"this mode, for example, a computing node without data source could act as"
" a *random correlation generator*, for example:"
msgstr ""

#: ../../development/runtime.rst:97
msgid "There are two notable optimizations in this mode."
msgstr ""

#: ../../development/runtime.rst:99
msgid ""
"The **private semantic**, a computing node may have private data "
"manipulations to accelerate MPC computation, for example, in *HESS "
"protocol*, we can do :code:`HShare x Private` without online "
"communication."
msgstr ""

#: ../../development/runtime.rst:100
msgid ""
"The **zero share data infeed**, when a data provider tries to share data "
"cross nodes, it can use :code:`ZeroShare + Private` trick to avoid online"
" communication."
msgstr ""

#: ../../development/runtime.rst:103
msgid "Hybrid"
msgstr ""

#: ../../development/runtime.rst:105
msgid ""
"This is the most general form, some data providers participate in the "
"secure computation while others do not."
msgstr ""

#: ../../development/runtime.rst:110
msgid ""
"the **private semantic** and **zero share data infeed** also apply to "
"data providers that participate in the computation."
msgstr ""

