# Copyright 2023 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  build-and-run:
    type: boolean
    default: false

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  linux_ut:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: secretflow/spu-ci:latest
    resource_class: 2xlarge
    shell: /bin/bash --login -eo pipefail
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Kill the whole ci after 1hr
      - run:
          name: Cancel build after set time
          background: true
          command: |
            sleep 3600
            echo "Canceling workflow as too much time has elapsed"
            curl -X POST --header "Content-Type: application/json" "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel?circle-token=${BUILD_TIMER_TOKEN}"
      - checkout
      - restore_cache:
          name: "Restore pip cache"
          key: &pip-cache pip-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
      - restore_cache:
          name: "Restore build cache"
          key: spu-build-comp-{{ arch }}-
      - run:
          name: Checkout devtools
          command: git clone https://github.com/secretflow/devtools.git
      - run:
          name: Decompress cache
          command: sh devtools/decompress-build-cache.sh spu_build_cache
      - run:
          name: "Install dependencies"
          command: |
            python3 -m pip install -U pip
            python3 -m pip install -r requirements.txt
            sed -i "s/tensorflow /tensorflow-cpu /g" ./requirements-dev.txt
            python3 -m pip install -r requirements-dev.txt
      - run:
          name: "build"
          command: bazel build //... -c opt --ui_event_filters=-info,-debug,-warning --disk_cache=~/.cache/spu_build_cache
      - run:
          name: "test"
          command: |
            set +e
            declare -i test_status
            bazel test //... -c opt --ui_event_filters=-info,-debug,-warning --test_output=errors --disk_cache=~/.cache/spu_build_cache | tee test_result.log; test_status=${PIPESTATUS[0]}

            sh devtools/rename-junit-xml.sh
            find bazel-bin/ -executable -type f -name "*_test"  -print0 | xargs -0 tar -cvzf test_binary.tar.gz
            find bazel-testlogs/ -type f -name "test.log"  -print0 | xargs -0 tar -cvzf test_logs.tar.gz

            exit ${test_status}
      - save_cache:
          key: *pip-cache
          paths:
            - /usr/local/lib64/python3.8/site-packages
      - run:
          name: Cleanup and compress cache
          command: |
            sh devtools/clean_disk_cache.sh ~/.cache/spu_build_cache
            sh devtools/compress-build-cache.sh spu_build_cache
          when: always
      - save_cache:
          key: spu-build-comp-{{ arch }}-{{ .Environment.CIRCLE_BUILD_NUM }}
          paths:
            - /root/.cache/spu_build_cache.tar.gz
          when: always
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test_binary.tar.gz
      - store_artifacts:
          path: test_logs.tar.gz
  macOS_ut:
    macos:
      xcode: 14.2
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    resource_class: macos.m1.large.gen1
    steps:
      - checkout
      - when:
            condition:
              equal: [ main, << pipeline.git.branch >> ]
            steps:
              - restore_cache:
                  name: "Restore build cache"
                  key: spu-build-comp-{{ arch }}-
              - run:
                  name: Checkout devtools
                  command: git clone https://github.com/secretflow/devtools.git
              - run:
                  name: Decompress cache
                  command: sh devtools/decompress-build-cache.sh spu_build_cache
              - run:
                  name: "Install homebrew dependencies"
                  command: |
                    brew install bazel cmake ninja libomp wget go md5sha1sum
                    (cd /opt/homebrew/Cellar/bazel/*.*.*/libexec/bin && curl -fLO https://github.com/bazelbuild/bazel/releases/download/5.4.1/bazel-5.4.1-darwin-arm64 && chmod +x bazel-5.4.1-darwin-arm64)
              - run:
                  name: "Install Miniconda"
                  command: |
                    wget https://repo.anaconda.com/miniconda/Miniconda3-py38_23.1.0-1-MacOSX-arm64.sh -O ~/miniconda.sh
                    bash ~/miniconda.sh -b -p $HOME/miniconda
                    source $HOME/miniconda/bin/activate
                    conda init bash zsh
                    pip install -r requirements.txt
                    pip install -r requirements-dev.txt
              - run:
                  name: "build"
                  command: bazel build //... -c opt --ui_event_filters=-info,-debug,-warning --disk_cache=~/.cache/spu_build_cache
              - run:
                  name: "test"
                  command: |
                    set +e
                    declare -i test_status
                    bazel test //... -c opt --ui_event_filters=-info,-debug,-warning --test_output=errors --disk_cache=~/.cache/spu_build_cache | tee test_result.log; test_status=${PIPESTATUS[0]}

                    sh devtools/rename-junit-xml.sh
                    find bazel-bin/ -perm +111 -type f -name "*_test"  -print0 | xargs -0 tar -cvzf test_binary.tar.gz
                    find bazel-testlogs/ -type f -name "test.log"  -print0 | xargs -0 tar -cvzf test_logs.tar.gz

                    exit ${test_status}
              - run:
                  name: Cleanup and compress cache
                  command: |
                    sh devtools/clean_disk_cache.sh ~/.cache/spu_build_cache
                    sh devtools/compress-build-cache.sh spu_build_cache
                  when: always
              - save_cache:
                  key: spu-build-comp-{{ arch }}-{{ .Environment.CIRCLE_BUILD_NUM }}
                  paths:
                    - ~/.cache/spu_build_cache.tar.gz
                  when: always
              - store_test_results:
                  path: test-results
              - store_artifacts:
                  path: test_binary.tar.gz
              - store_artifacts:
                  path: test_logs.tar.gz

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  unittest:
    when: << pipeline.parameters.build-and-run >>
    jobs:
      - linux_ut
      - macOS_ut
