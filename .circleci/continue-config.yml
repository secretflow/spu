# Copyright 2023 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  build-and-run:
    type: boolean
    default: false

executors:
  linux_executor: # declares a reusable executor
    parameters:
      resource_class:
        type: string
    docker:
      - image: secretflow/ubuntu-base-ci:latest
    resource_class: << parameters.resource_class >>
    shell: /bin/bash --login -eo pipefail

commands:
  build_and_test:
    parameters:
      targets:
        type: string
        default: "spu/tests"
      groups:
        type: string
        default: "--group dev"
    steps:
      # Kill the whole ci after 1hr
      - run:
          name: Cancel build after set time
          background: true
          command: |
            sleep 7200
            echo "Canceling workflow as too much time has elapsed"
            curl -X POST --header "Content-Type: application/json" "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel?circle-token=${BUILD_TIMER_TOKEN}"
      - run:
          name: Checkout devtools
          command: git clone https://github.com/secretflow/devtools.git ../devtools
      - run:
          name: Setup BuildBuddy Cache
          command: |
            ../devtools/bazel_cache_setup.py
            pushd src
            ../../devtools/bazel_cache_setup.py
            popd
      - run:
          name: "build"
          command: |
            set +e

            bazelisk build //... -c opt --ui_event_filters=-info,-debug,-warning;
            cp bazel-bin/spu/*.so spu/
      - run:
          name: "test"
          command: |
            set +e
            uv venv --python 3.10
            uv sync << parameters.groups >>
            uv pip install -e .
            uv run pytest -v -x --capture=no << parameters.targets >>

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  linux_ut:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            if [ -x "$(command -v npm)" ]; then
                npm install -g @bazel/bazelisk
            elif [ -x "$(command -v dpkg)" ]; then
                if [ "`uname -m`" == "x86_64" ]; then
                    wget https://github.com/bazelbuild/bazelisk/releases/download/v1.25.0/bazelisk-amd64.deb && dpkg -i bazelisk-amd64.deb
                elif [ "`uname -m`" == "aarch64" ]; then
                    wget https://github.com/bazelbuild/bazelisk/releases/download/v1.25.0/bazelisk-arm64.deb && dpkg -i bazelisk-arm64.deb
                fi
            elif [ -x "$(command -v apt)" ]; then
                apt install -y npm && npm install -g @bazel/bazelisk
            elif [ -x "$(command -v yum)" ]; then
                yum install -y npm && npm install -g @bazel/bazelisk
            fi
      - build_and_test
  linux_ml_ut:
    executor:
      name: linux_executor
      resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            if [ -x "$(command -v npm)" ]; then
                npm install -g @bazel/bazelisk
            elif [ -x "$(command -v dpkg)" ]; then
                if [ "`uname -m`" == "x86_64" ]; then
                    wget https://github.com/bazelbuild/bazelisk/releases/download/v1.25.0/bazelisk-amd64.deb && dpkg -i bazelisk-amd64.deb
                elif [ "`uname -m`" == "aarch64" ]; then
                    wget https://github.com/bazelbuild/bazelisk/releases/download/v1.25.0/bazelisk-arm64.deb && dpkg -i bazelisk-arm64.deb
                fi
            elif [ -x "$(command -v apt)" ]; then
                apt install -y npm && npm install -g @bazel/bazelisk
            elif [ -x "$(command -v yum)" ]; then
                yum install -y npm && npm install -g @bazel/bazelisk
            fi
      - run:
          name: Install extra deps
          command: |
            python3 -m pip install tzdata
      - build_and_test:
          targets: examples/python/ml/ml_test.py
          groups: --group dev --group examples
  macOS_ut:
    macos:
      xcode: 16.0.0
    resource_class: m4pro.medium
    steps:
      - checkout
      - run:
          name: "Install homebrew dependencies"
          command: brew install bazelisk cmake ninja libomp wget md5sha1sum
      - run:
          name: "install uv"
          command: |
            wget -qO- https://astral.sh/uv/install.sh | sh
      - build_and_test
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  unittest:
    when: << pipeline.parameters.build-and-run >>
    jobs:
      - linux_ut:
          name: linux_ut-<<matrix.resource_class>>
          matrix:
            parameters:
              resource_class: ["2xlarge+", "arm.2xlarge"]
      - linux_ml_ut:
          requires:
            - linux_ut-2xlarge+
          filters:
            branches:
              only:
                - main
      - macOS_ut
