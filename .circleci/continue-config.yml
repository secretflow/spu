# Copyright 2023 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  build-and-run:
    type: boolean
    default: false

executors:
  linux_executor: # declares a reusable executor
    parameters:
      resource_class:
        type: string
    docker:
      - image: secretflow/ubuntu-base-ci:latest
    resource_class: << parameters.resource_class >>
    shell: /bin/bash --login -eo pipefail

commands:
  build_and_test:
    parameters:
      targets:
        type: string
        default: "//..."
      extra_bazel_test_args:
        type: string
        default: ""
    steps:
      # Kill the whole ci after 1hr
      - run:
          name: Cancel build after set time
          background: true
          command: |
            sleep 7200
            echo "Canceling workflow as too much time has elapsed"
            curl -X POST --header "Content-Type: application/json" "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel?circle-token=${BUILD_TIMER_TOKEN}"
      - run:
          name: Checkout devtools
          command: git clone https://github.com/secretflow/devtools.git ../devtools
      - run:
          name: "Install dependencies"
          command: |
            python3 -m pip install -r requirements.txt
            python3 -m pip install -r requirements-dev.txt
      - run:
          name: Setup GCS
          command: |
            echo ${gcs_content} > ../gcs.data
            ../devtools/bazel_cache_setup.py --in_file=../gcs.data --out_file=../gcs.json --min_download
      - run:
          name: "build"
          command: bazel build <<parameters.targets>> -c opt --ui_event_filters=-info,-debug,-warning --jobs 20
      - run:
          name: "test"
          command: |
            set +e
            declare -i test_status
            bazel test <<parameters.extra_bazel_test_args>> <<parameters.targets>> -c opt --ui_event_filters=-info,-debug,-warning --test_output=errors| tee test_result.log; test_status=${PIPESTATUS[0]}

            sh ../devtools/rename-junit-xml.sh
            find bazel-testlogs/ -type f -name "test.log"  -print0 | xargs -0 tar -cvzf test_logs.tar.gz

            exit ${test_status}
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test_logs.tar.gz

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  linux_ut:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - restore_cache:
          name: restore pip cache
          key: &pip-cache pip-{{ arch }}-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
      - build_and_test
      - save_cache:
          key: *pip-cache
          paths:
            - /root/miniconda3/lib/python3.10/site-packages
          when: always
  linux_ml_ut:
    executor:
      name: linux_executor
      resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Install extra deps
          command: |
            python3 -m pip install tzdata
            python3 -m pip install -r examples/python/ml/requirements.txt
      - build_and_test:
          targets: //examples/python/ml:ml_test
          extra_bazel_test_args: --test_env LD_LIBRARY_PATH=/root/miniconda3/lib/
  macOS_ut:
    macos:
      xcode: 15.4.0
    resource_class: macos.m1.large.gen1
    steps:
      - checkout
      - run:
          name: "Install homebrew dependencies"
          command: brew install bazelisk cmake ninja libomp wget md5sha1sum
      - run:
          name: "Install Miniconda"
          command: |
            wget https://repo.anaconda.com/miniconda/Miniconda3-py310_24.3.0-0-MacOSX-arm64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p $HOME/miniconda
            source $HOME/miniconda/bin/activate
            conda init bash zsh
            pip install -r requirements.txt
            pip install -r requirements-dev.txt
      - build_and_test
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  unittest:
    when: << pipeline.parameters.build-and-run >>
    jobs:
      - linux_ut:
          name: linux_ut-<<matrix.resource_class>>
          matrix:
            parameters:
              resource_class: ["2xlarge+", "arm.2xlarge"]
      - linux_ml_ut:
          requires:
            - linux_ut-2xlarge+
          filters:
            branches:
              only:
                - main
      - macOS_ut
