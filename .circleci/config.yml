# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  linux_ut:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: registry.hub.docker.com/secretflow/secretflow-gcc11-anolis-dev:0.3
    resource_class: xlarge
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - restore_cache:
          name: Restore spu-linux-ut bazel cache
          keys:
            - bazel-spu-linux-ut
      - run:
          name: "test"
          command: |
            rm -rf /root/.cache/bazel/_bazel_root/install/
            bazel test //spu/... --ui_event_filters=-info,-debug,-warning --jobs=8 --test_timeout=1800 --test_output=errors
      - store_test_results:
          path: ./bazel-testlogs
      - save_cache:
          name: Save spu-linux-ut bazel cache
          key: bazel-spu-linux-ut
          paths:
            - ~/.cache/bazel
  macOS_ut:
    macos:
      xcode: 13.0.0
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    resource_class: large
    steps:
      - checkout
      - run:
          name: "test"
          command: |
            set -ex
            
            brew install bazel cmake ninja nasm libomp wget
            (cd "/usr/local/Cellar/bazel/4.2.1/libexec/bin" && curl -fLO https://releases.bazel.build/5.1.1/release/bazel-5.1.1-darwin-x86_64 && chmod +x bazel-5.1.1-darwin-x86_64)

            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p $HOME/miniconda
            source $HOME/miniconda/bin/activate
            conda init zsh


            conda create -y -n secretflow python=3.8
            conda activate secretflow
            conda install -y grpcio

            pip install -r requirements.txt

            bazel test //spu/... --ui_event_filters=-info,-debug,-warning --jobs=8 --test_timeout=1800 --test_output=errors

  macOS_publish:
    macos:
      xcode: 13.0.0
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    resource_class: large
    steps:
      - checkout
      - run:
          name: "test"
          command: |
            set -ex
            
            brew install bazel cmake ninja nasm libomp wget
            (cd "/usr/local/Cellar/bazel/4.2.1/libexec/bin" && curl -fLO https://releases.bazel.build/5.1.1/release/bazel-5.1.1-darwin-x86_64 && chmod +x bazel-5.1.1-darwin-x86_64)

            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p $HOME/miniconda
            source $HOME/miniconda/bin/activate
            conda init zsh


            conda create -y -n secretflow python=3.8
            conda activate secretflow
            conda install -y grpcio

            pip install -r requirements.txt

            env BAZEL_MAX_JOBS=8 sh ./build_wheel_entrypoint.sh
            spu_wheel_name=$(<./spu_wheel.name)
            spu_wheel_path="./${spu_wheel_name//sf-spu/sf_spu}"
            python3 -m pip install twine
            python3 -m twine upload -r pypi -u __token__ -p ${PYPI_TWINE_TOKEN} $spu_wheel_path

  linux_publish:
    docker:
      - image: registry.hub.docker.com/secretflow/secretflow-gcc11-centos7-release:0.1
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: "build package and publish"
          command: |
            set -ex
            env BAZEL_MAX_JOBS=8 sh ./build_wheel_entrypoint.sh
            spu_wheel_name=$(<./spu_wheel.name)
            spu_wheel_path="./${spu_wheel_name//sf-spu/sf_spu}"
            python3 -m pip install twine
            python3 -m twine upload -r pypi -u __token__ -p ${PYPI_TWINE_TOKEN} $spu_wheel_path

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  ut:
    jobs:
      - linux_ut
  linux_publish:
    when: << pipeline.parameters.GHA_Action >>
    jobs:
      - linux_publish
  macOS_publish:
    when: << pipeline.parameters.GHA_Action >>
    jobs:
      - macOS_publish
    
